// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc_service.proto

/*
Package remote is a generated protocol buffer package.

It is generated from these files:
	rpc_service.proto

It has these top-level messages:
	ClientCheckCmd
	PbResult
	ServerCheckRes
	C_TxCmd
	C_AddDataCmd
	C_DelDataCmd
	C_ModifyDataCmd
	C_QueryDataCmd
	S_AddDataCmd
	S_DelDataCmd
	S_ModifyDataCmd
	S_QueryDataCmd
	ClientCmd
	ServerCmd
*/
package remote

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CodeType int32

const (
	CodeType_OK           CodeType = 0
	CodeType_CmdNotFound  CodeType = 1
	CodeType_DataNotFound CodeType = 2
	CodeType_MsgMissParam CodeType = 3
	CodeType_ExternalErr  CodeType = 4
	CodeType_AccNotFound  CodeType = 5
)

var CodeType_name = map[int32]string{
	0: "OK",
	1: "CmdNotFound",
	2: "DataNotFound",
	3: "MsgMissParam",
	4: "ExternalErr",
	5: "AccNotFound",
}
var CodeType_value = map[string]int32{
	"OK":           0,
	"CmdNotFound":  1,
	"DataNotFound": 2,
	"MsgMissParam": 3,
	"ExternalErr":  4,
	"AccNotFound":  5,
}

func (x CodeType) String() string {
	return proto.EnumName(CodeType_name, int32(x))
}
func (CodeType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type C_CmdType int32

const (
	C_CmdType_CNone         C_CmdType = 0
	C_CmdType_Tx            C_CmdType = 1
	C_CmdType_AddDataRes    C_CmdType = 2
	C_CmdType_DelDataRes    C_CmdType = 3
	C_CmdType_ModifyDataRes C_CmdType = 4
	C_CmdType_QueryDataRes  C_CmdType = 5
	C_CmdType_CCmdResult    C_CmdType = 6
)

var C_CmdType_name = map[int32]string{
	0: "CNone",
	1: "Tx",
	2: "AddDataRes",
	3: "DelDataRes",
	4: "ModifyDataRes",
	5: "QueryDataRes",
	6: "CCmdResult",
}
var C_CmdType_value = map[string]int32{
	"CNone":         0,
	"Tx":            1,
	"AddDataRes":    2,
	"DelDataRes":    3,
	"ModifyDataRes": 4,
	"QueryDataRes":  5,
	"CCmdResult":    6,
}

func (x C_CmdType) String() string {
	return proto.EnumName(C_CmdType_name, int32(x))
}
func (C_CmdType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type S_CmdType int32

const (
	S_CmdType_SNone      S_CmdType = 0
	S_CmdType_AddData    S_CmdType = 1
	S_CmdType_DelData    S_CmdType = 2
	S_CmdType_ModifyData S_CmdType = 3
	S_CmdType_QueryData  S_CmdType = 4
	S_CmdType_Receipt    S_CmdType = 5
)

var S_CmdType_name = map[int32]string{
	0: "SNone",
	1: "AddData",
	2: "DelData",
	3: "ModifyData",
	4: "QueryData",
	5: "Receipt",
}
var S_CmdType_value = map[string]int32{
	"SNone":      0,
	"AddData":    1,
	"DelData":    2,
	"ModifyData": 3,
	"QueryData":  4,
	"Receipt":    5,
}

func (x S_CmdType) String() string {
	return proto.EnumName(S_CmdType_name, int32(x))
}
func (S_CmdType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ClientCheckCmd struct {
	AccountID string `protobuf:"bytes,1,opt,name=AccountID" json:"AccountID,omitempty"`
	Tx        []byte `protobuf:"bytes,2,opt,name=Tx,proto3" json:"Tx,omitempty"`
}

func (m *ClientCheckCmd) Reset()                    { *m = ClientCheckCmd{} }
func (m *ClientCheckCmd) String() string            { return proto.CompactTextString(m) }
func (*ClientCheckCmd) ProtoMessage()               {}
func (*ClientCheckCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ClientCheckCmd) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *ClientCheckCmd) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

type PbResult struct {
	Code CodeType `protobuf:"varint,1,opt,name=Code,enum=remote.CodeType" json:"Code,omitempty"`
	Data []byte   `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	Log  string   `protobuf:"bytes,3,opt,name=Log" json:"Log,omitempty"`
}

func (m *PbResult) Reset()                    { *m = PbResult{} }
func (m *PbResult) String() string            { return proto.CompactTextString(m) }
func (*PbResult) ProtoMessage()               {}
func (*PbResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PbResult) GetCode() CodeType {
	if m != nil {
		return m.Code
	}
	return CodeType_OK
}

func (m *PbResult) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PbResult) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

type ServerCheckRes struct {
	Result *PbResult `protobuf:"bytes,1,opt,name=Result" json:"Result,omitempty"`
}

func (m *ServerCheckRes) Reset()                    { *m = ServerCheckRes{} }
func (m *ServerCheckRes) String() string            { return proto.CompactTextString(m) }
func (*ServerCheckRes) ProtoMessage()               {}
func (*ServerCheckRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ServerCheckRes) GetResult() *PbResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type C_TxCmd struct {
	Tx          []byte `protobuf:"bytes,1,opt,name=Tx,proto3" json:"Tx,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=BlockHeight" json:"BlockHeight,omitempty"`
}

func (m *C_TxCmd) Reset()                    { *m = C_TxCmd{} }
func (m *C_TxCmd) String() string            { return proto.CompactTextString(m) }
func (*C_TxCmd) ProtoMessage()               {}
func (*C_TxCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *C_TxCmd) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *C_TxCmd) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type C_AddDataCmd struct {
	Result *PbResult `protobuf:"bytes,1,opt,name=Result" json:"Result,omitempty"`
}

func (m *C_AddDataCmd) Reset()                    { *m = C_AddDataCmd{} }
func (m *C_AddDataCmd) String() string            { return proto.CompactTextString(m) }
func (*C_AddDataCmd) ProtoMessage()               {}
func (*C_AddDataCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *C_AddDataCmd) GetResult() *PbResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type C_DelDataCmd struct {
	Value  []byte    `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Result *PbResult `protobuf:"bytes,2,opt,name=Result" json:"Result,omitempty"`
}

func (m *C_DelDataCmd) Reset()                    { *m = C_DelDataCmd{} }
func (m *C_DelDataCmd) String() string            { return proto.CompactTextString(m) }
func (*C_DelDataCmd) ProtoMessage()               {}
func (*C_DelDataCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *C_DelDataCmd) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *C_DelDataCmd) GetResult() *PbResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type C_ModifyDataCmd struct {
	Result *PbResult `protobuf:"bytes,1,opt,name=Result" json:"Result,omitempty"`
}

func (m *C_ModifyDataCmd) Reset()                    { *m = C_ModifyDataCmd{} }
func (m *C_ModifyDataCmd) String() string            { return proto.CompactTextString(m) }
func (*C_ModifyDataCmd) ProtoMessage()               {}
func (*C_ModifyDataCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *C_ModifyDataCmd) GetResult() *PbResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type C_QueryDataCmd struct {
	Value  []byte    `protobuf:"bytes,1,opt,name=Value,proto3" json:"Value,omitempty"`
	Result *PbResult `protobuf:"bytes,2,opt,name=Result" json:"Result,omitempty"`
}

func (m *C_QueryDataCmd) Reset()                    { *m = C_QueryDataCmd{} }
func (m *C_QueryDataCmd) String() string            { return proto.CompactTextString(m) }
func (*C_QueryDataCmd) ProtoMessage()               {}
func (*C_QueryDataCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *C_QueryDataCmd) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *C_QueryDataCmd) GetResult() *PbResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type S_AddDataCmd struct {
	Key   string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *S_AddDataCmd) Reset()                    { *m = S_AddDataCmd{} }
func (m *S_AddDataCmd) String() string            { return proto.CompactTextString(m) }
func (*S_AddDataCmd) ProtoMessage()               {}
func (*S_AddDataCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *S_AddDataCmd) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *S_AddDataCmd) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type S_DelDataCmd struct {
	Key string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
}

func (m *S_DelDataCmd) Reset()                    { *m = S_DelDataCmd{} }
func (m *S_DelDataCmd) String() string            { return proto.CompactTextString(m) }
func (*S_DelDataCmd) ProtoMessage()               {}
func (*S_DelDataCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *S_DelDataCmd) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type S_ModifyDataCmd struct {
	Key   string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *S_ModifyDataCmd) Reset()                    { *m = S_ModifyDataCmd{} }
func (m *S_ModifyDataCmd) String() string            { return proto.CompactTextString(m) }
func (*S_ModifyDataCmd) ProtoMessage()               {}
func (*S_ModifyDataCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *S_ModifyDataCmd) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *S_ModifyDataCmd) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type S_QueryDataCmd struct {
	Key string `protobuf:"bytes,1,opt,name=Key" json:"Key,omitempty"`
}

func (m *S_QueryDataCmd) Reset()                    { *m = S_QueryDataCmd{} }
func (m *S_QueryDataCmd) String() string            { return proto.CompactTextString(m) }
func (*S_QueryDataCmd) ProtoMessage()               {}
func (*S_QueryDataCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *S_QueryDataCmd) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type ClientCmd struct {
	Hash      []byte    `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	AccountID string    `protobuf:"bytes,2,opt,name=AccountID" json:"AccountID,omitempty"`
	Type      C_CmdType `protobuf:"varint,3,opt,name=Type,enum=remote.C_CmdType" json:"Type,omitempty"`
	Data      []byte    `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *ClientCmd) Reset()                    { *m = ClientCmd{} }
func (m *ClientCmd) String() string            { return proto.CompactTextString(m) }
func (*ClientCmd) ProtoMessage()               {}
func (*ClientCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ClientCmd) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ClientCmd) GetAccountID() string {
	if m != nil {
		return m.AccountID
	}
	return ""
}

func (m *ClientCmd) GetType() C_CmdType {
	if m != nil {
		return m.Type
	}
	return C_CmdType_CNone
}

func (m *ClientCmd) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ServerCmd struct {
	Hash []byte    `protobuf:"bytes,1,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Type S_CmdType `protobuf:"varint,2,opt,name=Type,enum=remote.S_CmdType" json:"Type,omitempty"`
	Data []byte    `protobuf:"bytes,3,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *ServerCmd) Reset()                    { *m = ServerCmd{} }
func (m *ServerCmd) String() string            { return proto.CompactTextString(m) }
func (*ServerCmd) ProtoMessage()               {}
func (*ServerCmd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ServerCmd) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ServerCmd) GetType() S_CmdType {
	if m != nil {
		return m.Type
	}
	return S_CmdType_SNone
}

func (m *ServerCmd) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*ClientCheckCmd)(nil), "remote.ClientCheckCmd")
	proto.RegisterType((*PbResult)(nil), "remote.PbResult")
	proto.RegisterType((*ServerCheckRes)(nil), "remote.ServerCheckRes")
	proto.RegisterType((*C_TxCmd)(nil), "remote.C_TxCmd")
	proto.RegisterType((*C_AddDataCmd)(nil), "remote.C_AddDataCmd")
	proto.RegisterType((*C_DelDataCmd)(nil), "remote.C_DelDataCmd")
	proto.RegisterType((*C_ModifyDataCmd)(nil), "remote.C_ModifyDataCmd")
	proto.RegisterType((*C_QueryDataCmd)(nil), "remote.C_QueryDataCmd")
	proto.RegisterType((*S_AddDataCmd)(nil), "remote.S_AddDataCmd")
	proto.RegisterType((*S_DelDataCmd)(nil), "remote.S_DelDataCmd")
	proto.RegisterType((*S_ModifyDataCmd)(nil), "remote.S_ModifyDataCmd")
	proto.RegisterType((*S_QueryDataCmd)(nil), "remote.S_QueryDataCmd")
	proto.RegisterType((*ClientCmd)(nil), "remote.ClientCmd")
	proto.RegisterType((*ServerCmd)(nil), "remote.ServerCmd")
	proto.RegisterEnum("remote.CodeType", CodeType_name, CodeType_value)
	proto.RegisterEnum("remote.C_CmdType", C_CmdType_name, C_CmdType_value)
	proto.RegisterEnum("remote.S_CmdType", S_CmdType_name, S_CmdType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RemoteAppService service

type RemoteAppServiceClient interface {
	CheckTx(ctx context.Context, in *ClientCheckCmd, opts ...grpc.CallOption) (*ServerCheckRes, error)
	Execute(ctx context.Context, opts ...grpc.CallOption) (RemoteAppService_ExecuteClient, error)
}

type remoteAppServiceClient struct {
	cc *grpc.ClientConn
}

func NewRemoteAppServiceClient(cc *grpc.ClientConn) RemoteAppServiceClient {
	return &remoteAppServiceClient{cc}
}

func (c *remoteAppServiceClient) CheckTx(ctx context.Context, in *ClientCheckCmd, opts ...grpc.CallOption) (*ServerCheckRes, error) {
	out := new(ServerCheckRes)
	err := grpc.Invoke(ctx, "/remote.RemoteAppService/CheckTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteAppServiceClient) Execute(ctx context.Context, opts ...grpc.CallOption) (RemoteAppService_ExecuteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_RemoteAppService_serviceDesc.Streams[0], c.cc, "/remote.RemoteAppService/Execute", opts...)
	if err != nil {
		return nil, err
	}
	x := &remoteAppServiceExecuteClient{stream}
	return x, nil
}

type RemoteAppService_ExecuteClient interface {
	Send(*ClientCmd) error
	Recv() (*ServerCmd, error)
	grpc.ClientStream
}

type remoteAppServiceExecuteClient struct {
	grpc.ClientStream
}

func (x *remoteAppServiceExecuteClient) Send(m *ClientCmd) error {
	return x.ClientStream.SendMsg(m)
}

func (x *remoteAppServiceExecuteClient) Recv() (*ServerCmd, error) {
	m := new(ServerCmd)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for RemoteAppService service

type RemoteAppServiceServer interface {
	CheckTx(context.Context, *ClientCheckCmd) (*ServerCheckRes, error)
	Execute(RemoteAppService_ExecuteServer) error
}

func RegisterRemoteAppServiceServer(s *grpc.Server, srv RemoteAppServiceServer) {
	s.RegisterService(&_RemoteAppService_serviceDesc, srv)
}

func _RemoteAppService_CheckTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientCheckCmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteAppServiceServer).CheckTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.RemoteAppService/CheckTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteAppServiceServer).CheckTx(ctx, req.(*ClientCheckCmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteAppService_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RemoteAppServiceServer).Execute(&remoteAppServiceExecuteServer{stream})
}

type RemoteAppService_ExecuteServer interface {
	Send(*ServerCmd) error
	Recv() (*ClientCmd, error)
	grpc.ServerStream
}

type remoteAppServiceExecuteServer struct {
	grpc.ServerStream
}

func (x *remoteAppServiceExecuteServer) Send(m *ServerCmd) error {
	return x.ServerStream.SendMsg(m)
}

func (x *remoteAppServiceExecuteServer) Recv() (*ClientCmd, error) {
	m := new(ClientCmd)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _RemoteAppService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remote.RemoteAppService",
	HandlerType: (*RemoteAppServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckTx",
			Handler:    _RemoteAppService_CheckTx_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _RemoteAppService_Execute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc_service.proto",
}

func init() { proto.RegisterFile("rpc_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 636 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6b, 0xdb, 0x40,
	0x10, 0x8d, 0x3e, 0x6c, 0x47, 0x63, 0x47, 0x59, 0x2f, 0xa5, 0x84, 0xd0, 0x83, 0x11, 0x2d, 0x98,
	0x1c, 0x4c, 0x49, 0xa0, 0x34, 0x2d, 0x14, 0x9c, 0x4d, 0x4a, 0x4a, 0x9a, 0x34, 0x95, 0x4c, 0x0e,
	0xa5, 0x60, 0x14, 0x69, 0xea, 0x88, 0x58, 0x96, 0x90, 0xe4, 0x20, 0x5f, 0xfb, 0xcb, 0xcb, 0x48,
	0x6b, 0xc9, 0x76, 0x08, 0x4d, 0xa1, 0x17, 0xb3, 0xfb, 0x56, 0xef, 0xbd, 0x99, 0xdd, 0xe7, 0x81,
	0x6e, 0x12, 0x7b, 0xe3, 0x14, 0x93, 0x87, 0xc0, 0xc3, 0x41, 0x9c, 0x44, 0x59, 0xc4, 0x9b, 0x09,
	0x86, 0x51, 0x86, 0xd6, 0x27, 0x30, 0xc5, 0x34, 0xc0, 0x59, 0x26, 0xee, 0xd0, 0xbb, 0x17, 0xa1,
	0xcf, 0x5f, 0x81, 0x31, 0xf4, 0xbc, 0x68, 0x3e, 0xcb, 0xbe, 0x9c, 0xee, 0x29, 0x3d, 0xa5, 0x6f,
	0xd8, 0x35, 0xc0, 0x4d, 0x50, 0x47, 0xf9, 0x9e, 0xda, 0x53, 0xfa, 0x1d, 0x5b, 0x1d, 0xe5, 0xd6,
	0x0d, 0x6c, 0x5f, 0xdf, 0xda, 0x98, 0xce, 0xa7, 0x19, 0x7f, 0x0d, 0xba, 0x88, 0x7c, 0x2c, 0x48,
	0xe6, 0x21, 0x1b, 0x94, 0x16, 0x03, 0xc2, 0x46, 0x8b, 0x18, 0xed, 0xe2, 0x94, 0x73, 0xd0, 0x4f,
	0xdd, 0xcc, 0x95, 0x1a, 0xc5, 0x9a, 0x33, 0xd0, 0xbe, 0x46, 0x93, 0x3d, 0xad, 0x70, 0xa3, 0xa5,
	0xf5, 0x01, 0x4c, 0x07, 0x93, 0x07, 0x4c, 0x8a, 0xba, 0x6c, 0x4c, 0x79, 0x1f, 0x9a, 0xa5, 0x4f,
	0xa1, 0xdf, 0xae, 0xf5, 0x97, 0xfe, 0xb6, 0x3c, 0xb7, 0x3e, 0x42, 0x4b, 0x8c, 0x47, 0x39, 0x35,
	0x53, 0x96, 0xab, 0x2c, 0xcb, 0xe5, 0x3d, 0x68, 0x9f, 0x4c, 0x23, 0xef, 0xfe, 0x1c, 0x83, 0xc9,
	0x5d, 0x56, 0xd4, 0xa0, 0xd9, 0xab, 0x90, 0xf5, 0x1e, 0x3a, 0x62, 0x3c, 0xf4, 0x7d, 0xaa, 0x8b,
	0x14, 0x9e, 0x6f, 0x7b, 0x45, 0xcc, 0x53, 0x9c, 0x2e, 0x99, 0x2f, 0xa0, 0x71, 0xe3, 0x4e, 0xe7,
	0x28, 0xed, 0xcb, 0xcd, 0x8a, 0x9e, 0xfa, 0xd7, 0x36, 0x76, 0xc5, 0xf8, 0x32, 0xf2, 0x83, 0x5f,
	0x8b, 0x7f, 0x2f, 0xe6, 0x1a, 0x4c, 0x31, 0xfe, 0x3e, 0xc7, 0x64, 0xf1, 0xbf, 0xca, 0x79, 0x07,
	0x1d, 0x67, 0xf5, 0x62, 0x18, 0x68, 0x17, 0xb8, 0x90, 0x09, 0xa1, 0x65, 0xed, 0xa0, 0xae, 0x38,
	0x58, 0x3d, 0xe2, 0xad, 0x5c, 0xcb, 0x23, 0x9e, 0x75, 0x0c, 0xbb, 0xce, 0x46, 0xa3, 0xcf, 0x15,
	0xb7, 0xc0, 0x74, 0xd6, 0xdb, 0x7c, 0x2c, 0x9f, 0x83, 0x21, 0x23, 0x1e, 0xfa, 0x94, 0xbe, 0x73,
	0x37, 0xbd, 0x93, 0x97, 0x50, 0xac, 0xd7, 0x13, 0xaf, 0x6e, 0x26, 0xfe, 0x0d, 0xe8, 0x94, 0xde,
	0x22, 0x9c, 0xe6, 0x61, 0xb7, 0x4a, 0xf5, 0x58, 0x84, 0x7e, 0x19, 0x6b, 0xfa, 0xad, 0x62, 0xad,
	0xd7, 0xb1, 0xb6, 0x7e, 0x80, 0x21, 0x43, 0xfc, 0x84, 0xf3, 0x52, 0x5b, 0x5d, 0xd7, 0x76, 0x9e,
	0xd0, 0xd6, 0x6a, 0xed, 0x83, 0x00, 0xb6, 0x97, 0x7f, 0x2c, 0xde, 0x04, 0xf5, 0xdb, 0x05, 0xdb,
	0xe2, 0xbb, 0xd0, 0x16, 0xa1, 0x7f, 0x15, 0x65, 0x9f, 0xa3, 0xf9, 0xcc, 0x67, 0x0a, 0x67, 0xd0,
	0xa1, 0x8f, 0x2b, 0x44, 0x25, 0xe4, 0x32, 0x9d, 0x5c, 0x06, 0x69, 0x7a, 0xed, 0x26, 0x6e, 0xc8,
	0x34, 0x22, 0x9d, 0xe5, 0x19, 0x26, 0x33, 0x77, 0x7a, 0x96, 0x24, 0x4c, 0x27, 0x60, 0xe8, 0x79,
	0x15, 0xa7, 0x71, 0x90, 0x82, 0x51, 0x75, 0xcb, 0x0d, 0x68, 0x88, 0xab, 0x68, 0x86, 0x6c, 0x8b,
	0x6c, 0x47, 0x39, 0x53, 0xb8, 0x09, 0x20, 0x73, 0x61, 0x63, 0xca, 0x54, 0xda, 0xcb, 0xf7, 0xa6,
	0xbd, 0xc6, 0xbb, 0xb0, 0x53, 0xbf, 0x2e, 0x41, 0x3a, 0x95, 0x51, 0xbd, 0x1a, 0x21, 0x0d, 0x22,
	0x09, 0x11, 0xfa, 0x65, 0xd8, 0x58, 0xf3, 0xe0, 0x27, 0x18, 0xce, 0xaa, 0xa9, 0x23, 0x4d, 0xdb,
	0xd0, 0x92, 0x66, 0x4c, 0xa1, 0x8d, 0x74, 0x2a, 0x6d, 0x6b, 0x1b, 0xa6, 0xf1, 0x1d, 0x30, 0x2a,
	0x0f, 0xa6, 0xd3, 0xb7, 0x36, 0x7a, 0x18, 0xc4, 0x19, 0x6b, 0x1c, 0xfe, 0x56, 0x80, 0xd9, 0xc5,
	0x65, 0x0f, 0xe3, 0xd8, 0x29, 0x27, 0x23, 0x3f, 0x86, 0x56, 0x31, 0x6d, 0x46, 0x39, 0x7f, 0x59,
	0x3d, 0xf3, 0xda, 0x70, 0xdc, 0xaf, 0xf0, 0x8d, 0xe1, 0x74, 0x04, 0xad, 0xb3, 0x1c, 0xbd, 0x79,
	0x86, 0xbc, 0xbb, 0x41, 0x0d, 0xfd, 0xfd, 0xee, 0x06, 0x2b, 0xf4, 0xfb, 0xca, 0x5b, 0xe5, 0x84,
	0x81, 0x19, 0x44, 0x83, 0x49, 0x12, 0x7b, 0xf2, 0xfc, 0xb6, 0x59, 0x0c, 0xe7, 0xa3, 0x3f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xca, 0x4c, 0x18, 0x24, 0xb1, 0x05, 0x00, 0x00,
}
