// Code generated by protoc-gen-gogo.
// source: rpc.proto
// DO NOT EDIT!

/*
	Package rpc is a generated protocol buffer package.

	It is generated from these files:
		rpc.proto

	It has these top-level messages:
		ResultBlockchainInfo
		ResultGenesis
		ResultBlock
		ResultOrgs
		ResultStatus
		Peer
		ResultNetInfo
		ResultValidators
		ResultDumpConsensusState
		ResultBroadcastTx
		ResultRequestSpecialOP
		ResultBroadcastTxCommit
		ResultUnconfirmedTxs
		ResultInfo
		ResultQuery
		ResultRefuseList
		ResultUnsafeFlushMempool
		ResultUnsafeSetConfig
		ResultUnsafeProfile
		ResultSubscribe
		ResultUnsubscribe
		ResultEvent
		ResultSurveillance
		ResultCoreVersion
		ResultNonEmptyHeights
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/Baptist-Publication/chorus/angine/protos/types"
import events "github.com/Baptist-Publication/chorus/angine/protos/events"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	Type_RpcNone            Type = 0
	Type_RpcGenesis         Type = 1
	Type_RpcBlockchainInfo  Type = 2
	Type_RpcBlock           Type = 3
	Type_RpcNonEmptyHeights Type = 4
	// 0x2 bytes are for the network
	Type_RpcStatus    Type = 32
	Type_RpcNetInfo   Type = 33
	Type_RpcDialSeeds Type = 34
	Type_RpcOrgs      Type = 35
	// 0x1  bytes are for refuseList
	Type_RpcRefuseList Type = 16
	// 0x4 bytes are for the consensus
	Type_RpcValidators         Type = 64
	Type_RpcDumpConsensusState Type = 65
	// 0x6 bytes are for txs / the application
	Type_RpcBroadcastTx       Type = 96
	Type_RpcUnconfirmedTxs    Type = 97
	Type_RpcBroadcastTxCommit Type = 98
	Type_RpcRequestSpecialOP  Type = 99
	// 0x7 bytes are for querying the application
	Type_RpcQuery Type = 112
	Type_RpcInfo  Type = 113
	// 0x8 bytes are for events
	Type_RpcSubscribe   Type = 128
	Type_RpcUnsubscribe Type = 129
	Type_RpcEvent       Type = 130
	// 0xa bytes for testing
	Type_RpcUnsafeSetConfig        Type = 160
	Type_RpcUnsafeStartCPUProfiler Type = 161
	Type_RpcUnsafeStopCPUProfiler  Type = 162
	Type_RpcUnsafeWriteHeapProfile Type = 163
	Type_RpcUnsafeFlushMempool     Type = 164
	Type_RpcCoreVersion            Type = 175
	// 0x9 bytes are for za_surveillance
	Type_RpcSurveillance Type = 144
)

var Type_name = map[int32]string{
	0:   "RpcNone",
	1:   "RpcGenesis",
	2:   "RpcBlockchainInfo",
	3:   "RpcBlock",
	4:   "RpcNonEmptyHeights",
	32:  "RpcStatus",
	33:  "RpcNetInfo",
	34:  "RpcDialSeeds",
	35:  "RpcOrgs",
	16:  "RpcRefuseList",
	64:  "RpcValidators",
	65:  "RpcDumpConsensusState",
	96:  "RpcBroadcastTx",
	97:  "RpcUnconfirmedTxs",
	98:  "RpcBroadcastTxCommit",
	99:  "RpcRequestSpecialOP",
	112: "RpcQuery",
	113: "RpcInfo",
	128: "RpcSubscribe",
	129: "RpcUnsubscribe",
	130: "RpcEvent",
	160: "RpcUnsafeSetConfig",
	161: "RpcUnsafeStartCPUProfiler",
	162: "RpcUnsafeStopCPUProfiler",
	163: "RpcUnsafeWriteHeapProfile",
	164: "RpcUnsafeFlushMempool",
	175: "RpcCoreVersion",
	144: "RpcSurveillance",
}
var Type_value = map[string]int32{
	"RpcNone":                   0,
	"RpcGenesis":                1,
	"RpcBlockchainInfo":         2,
	"RpcBlock":                  3,
	"RpcNonEmptyHeights":        4,
	"RpcStatus":                 32,
	"RpcNetInfo":                33,
	"RpcDialSeeds":              34,
	"RpcOrgs":                   35,
	"RpcRefuseList":             16,
	"RpcValidators":             64,
	"RpcDumpConsensusState":     65,
	"RpcBroadcastTx":            96,
	"RpcUnconfirmedTxs":         97,
	"RpcBroadcastTxCommit":      98,
	"RpcRequestSpecialOP":       99,
	"RpcQuery":                  112,
	"RpcInfo":                   113,
	"RpcSubscribe":              128,
	"RpcUnsubscribe":            129,
	"RpcEvent":                  130,
	"RpcUnsafeSetConfig":        160,
	"RpcUnsafeStartCPUProfiler": 161,
	"RpcUnsafeStopCPUProfiler":  162,
	"RpcUnsafeWriteHeapProfile": 163,
	"RpcUnsafeFlushMempool":     164,
	"RpcCoreVersion":            175,
	"RpcSurveillance":           144,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0} }

type ResultBlockchainInfo struct {
	LastHeight int64              `protobuf:"varint,1,opt,name=LastHeight,proto3" json:"LastHeight,omitempty"`
	BlockMetas []*types.BlockMeta `protobuf:"bytes,2,rep,name=BlockMetas" json:"BlockMetas,omitempty"`
}

func (m *ResultBlockchainInfo) Reset()                    { *m = ResultBlockchainInfo{} }
func (m *ResultBlockchainInfo) String() string            { return proto.CompactTextString(m) }
func (*ResultBlockchainInfo) ProtoMessage()               {}
func (*ResultBlockchainInfo) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{0} }

func (m *ResultBlockchainInfo) GetLastHeight() int64 {
	if m != nil {
		return m.LastHeight
	}
	return 0
}

func (m *ResultBlockchainInfo) GetBlockMetas() []*types.BlockMeta {
	if m != nil {
		return m.BlockMetas
	}
	return nil
}

type ResultGenesis struct {
	GenesisJSON []byte `protobuf:"bytes,1,opt,name=GenesisJSON,proto3" json:"GenesisJSON,omitempty"`
}

func (m *ResultGenesis) Reset()                    { *m = ResultGenesis{} }
func (m *ResultGenesis) String() string            { return proto.CompactTextString(m) }
func (*ResultGenesis) ProtoMessage()               {}
func (*ResultGenesis) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{1} }

func (m *ResultGenesis) GetGenesisJSON() []byte {
	if m != nil {
		return m.GenesisJSON
	}
	return nil
}

type ResultBlock struct {
	BlockMeta *types.BlockMeta `protobuf:"bytes,1,opt,name=BlockMeta" json:"BlockMeta,omitempty"`
	Block     *types.Block     `protobuf:"bytes,2,opt,name=Block" json:"Block,omitempty"`
}

func (m *ResultBlock) Reset()                    { *m = ResultBlock{} }
func (m *ResultBlock) String() string            { return proto.CompactTextString(m) }
func (*ResultBlock) ProtoMessage()               {}
func (*ResultBlock) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{2} }

func (m *ResultBlock) GetBlockMeta() *types.BlockMeta {
	if m != nil {
		return m.BlockMeta
	}
	return nil
}

func (m *ResultBlock) GetBlock() *types.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type ResultOrgs struct {
	Names []string `protobuf:"bytes,1,rep,name=Names" json:"Names,omitempty"`
}

func (m *ResultOrgs) Reset()                    { *m = ResultOrgs{} }
func (m *ResultOrgs) String() string            { return proto.CompactTextString(m) }
func (*ResultOrgs) ProtoMessage()               {}
func (*ResultOrgs) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{3} }

func (m *ResultOrgs) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type ResultStatus struct {
	NodeInfoJSON      []byte        `protobuf:"bytes,1,opt,name=NodeInfoJSON,proto3" json:"NodeInfoJSON,omitempty"`
	Pubkey            *types.PubKey `protobuf:"bytes,2,opt,name=Pubkey" json:"Pubkey,omitempty"`
	LatestBlockHash   []byte        `protobuf:"bytes,3,opt,name=LatestBlockHash,proto3" json:"LatestBlockHash,omitempty"`
	LatestAppHash     []byte        `protobuf:"bytes,4,opt,name=LatestAppHash,proto3" json:"LatestAppHash,omitempty"`
	LatestBlockHeight int64         `protobuf:"varint,5,opt,name=LatestBlockHeight,proto3" json:"LatestBlockHeight,omitempty"`
	LatestBlockTime   int64         `protobuf:"varint,6,opt,name=LatestBlockTime,proto3" json:"LatestBlockTime,omitempty"`
}

func (m *ResultStatus) Reset()                    { *m = ResultStatus{} }
func (m *ResultStatus) String() string            { return proto.CompactTextString(m) }
func (*ResultStatus) ProtoMessage()               {}
func (*ResultStatus) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{4} }

func (m *ResultStatus) GetNodeInfoJSON() []byte {
	if m != nil {
		return m.NodeInfoJSON
	}
	return nil
}

func (m *ResultStatus) GetPubkey() *types.PubKey {
	if m != nil {
		return m.Pubkey
	}
	return nil
}

func (m *ResultStatus) GetLatestBlockHash() []byte {
	if m != nil {
		return m.LatestBlockHash
	}
	return nil
}

func (m *ResultStatus) GetLatestAppHash() []byte {
	if m != nil {
		return m.LatestAppHash
	}
	return nil
}

func (m *ResultStatus) GetLatestBlockHeight() int64 {
	if m != nil {
		return m.LatestBlockHeight
	}
	return 0
}

func (m *ResultStatus) GetLatestBlockTime() int64 {
	if m != nil {
		return m.LatestBlockTime
	}
	return 0
}

type Peer struct {
	NodeInfoJSON         []byte `protobuf:"bytes,1,opt,name=NodeInfoJSON,proto3" json:"NodeInfoJSON,omitempty"`
	IsOutbound           bool   `protobuf:"varint,2,opt,name=IsOutbound,proto3" json:"IsOutbound,omitempty"`
	ConnectionStatusJSON []byte `protobuf:"bytes,3,opt,name=ConnectionStatusJSON,proto3" json:"ConnectionStatusJSON,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{5} }

func (m *Peer) GetNodeInfoJSON() []byte {
	if m != nil {
		return m.NodeInfoJSON
	}
	return nil
}

func (m *Peer) GetIsOutbound() bool {
	if m != nil {
		return m.IsOutbound
	}
	return false
}

func (m *Peer) GetConnectionStatusJSON() []byte {
	if m != nil {
		return m.ConnectionStatusJSON
	}
	return nil
}

type ResultNetInfo struct {
	Listening bool     `protobuf:"varint,1,opt,name=Listening,proto3" json:"Listening,omitempty"`
	Listeners []string `protobuf:"bytes,2,rep,name=Listeners" json:"Listeners,omitempty"`
	Peers     []*Peer  `protobuf:"bytes,3,rep,name=peers" json:"peers,omitempty"`
}

func (m *ResultNetInfo) Reset()                    { *m = ResultNetInfo{} }
func (m *ResultNetInfo) String() string            { return proto.CompactTextString(m) }
func (*ResultNetInfo) ProtoMessage()               {}
func (*ResultNetInfo) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{6} }

func (m *ResultNetInfo) GetListening() bool {
	if m != nil {
		return m.Listening
	}
	return false
}

func (m *ResultNetInfo) GetListeners() []string {
	if m != nil {
		return m.Listeners
	}
	return nil
}

func (m *ResultNetInfo) GetPeers() []*Peer {
	if m != nil {
		return m.Peers
	}
	return nil
}

type ResultValidators struct {
	BlockHeight    int64    `protobuf:"varint,1,opt,name=BlockHeight,proto3" json:"BlockHeight,omitempty"`
	ValidatorsJSON [][]byte `protobuf:"bytes,2,rep,name=ValidatorsJSON" json:"ValidatorsJSON,omitempty"`
}

func (m *ResultValidators) Reset()                    { *m = ResultValidators{} }
func (m *ResultValidators) String() string            { return proto.CompactTextString(m) }
func (*ResultValidators) ProtoMessage()               {}
func (*ResultValidators) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{7} }

func (m *ResultValidators) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ResultValidators) GetValidatorsJSON() [][]byte {
	if m != nil {
		return m.ValidatorsJSON
	}
	return nil
}

type ResultDumpConsensusState struct {
	RoundState      string   `protobuf:"bytes,1,opt,name=RoundState,proto3" json:"RoundState,omitempty"`
	PeerRoundStates []string `protobuf:"bytes,2,rep,name=PeerRoundStates" json:"PeerRoundStates,omitempty"`
}

func (m *ResultDumpConsensusState) Reset()                    { *m = ResultDumpConsensusState{} }
func (m *ResultDumpConsensusState) String() string            { return proto.CompactTextString(m) }
func (*ResultDumpConsensusState) ProtoMessage()               {}
func (*ResultDumpConsensusState) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{8} }

func (m *ResultDumpConsensusState) GetRoundState() string {
	if m != nil {
		return m.RoundState
	}
	return ""
}

func (m *ResultDumpConsensusState) GetPeerRoundStates() []string {
	if m != nil {
		return m.PeerRoundStates
	}
	return nil
}

type ResultBroadcastTx struct {
	Result *types.Result `protobuf:"bytes,1,opt,name=Result" json:"Result,omitempty"`
}

func (m *ResultBroadcastTx) Reset()                    { *m = ResultBroadcastTx{} }
func (m *ResultBroadcastTx) String() string            { return proto.CompactTextString(m) }
func (*ResultBroadcastTx) ProtoMessage()               {}
func (*ResultBroadcastTx) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{9} }

func (m *ResultBroadcastTx) GetResult() *types.Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ResultRequestSpecialOP struct {
	Result *types.Result `protobuf:"bytes,1,opt,name=Result" json:"Result,omitempty"`
}

func (m *ResultRequestSpecialOP) Reset()                    { *m = ResultRequestSpecialOP{} }
func (m *ResultRequestSpecialOP) String() string            { return proto.CompactTextString(m) }
func (*ResultRequestSpecialOP) ProtoMessage()               {}
func (*ResultRequestSpecialOP) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{10} }

func (m *ResultRequestSpecialOP) GetResult() *types.Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ResultBroadcastTxCommit struct {
	Result *types.Result `protobuf:"bytes,1,opt,name=Result" json:"Result,omitempty"`
}

func (m *ResultBroadcastTxCommit) Reset()                    { *m = ResultBroadcastTxCommit{} }
func (m *ResultBroadcastTxCommit) String() string            { return proto.CompactTextString(m) }
func (*ResultBroadcastTxCommit) ProtoMessage()               {}
func (*ResultBroadcastTxCommit) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{11} }

func (m *ResultBroadcastTxCommit) GetResult() *types.Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ResultUnconfirmedTxs struct {
	N   int64    `protobuf:"varint,1,opt,name=N,proto3" json:"N,omitempty"`
	Txs [][]byte `protobuf:"bytes,2,rep,name=Txs" json:"Txs,omitempty"`
}

func (m *ResultUnconfirmedTxs) Reset()                    { *m = ResultUnconfirmedTxs{} }
func (m *ResultUnconfirmedTxs) String() string            { return proto.CompactTextString(m) }
func (*ResultUnconfirmedTxs) ProtoMessage()               {}
func (*ResultUnconfirmedTxs) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{12} }

func (m *ResultUnconfirmedTxs) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *ResultUnconfirmedTxs) GetTxs() [][]byte {
	if m != nil {
		return m.Txs
	}
	return nil
}

type ResultInfo struct {
	Data             string `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	Version          string `protobuf:"bytes,2,opt,name=Version,proto3" json:"Version,omitempty"`
	LastBlockHeight  int64  `protobuf:"varint,3,opt,name=LastBlockHeight,proto3" json:"LastBlockHeight,omitempty"`
	LastBlockAppHash []byte `protobuf:"bytes,4,opt,name=LastBlockAppHash,proto3" json:"LastBlockAppHash,omitempty"`
}

func (m *ResultInfo) Reset()                    { *m = ResultInfo{} }
func (m *ResultInfo) String() string            { return proto.CompactTextString(m) }
func (*ResultInfo) ProtoMessage()               {}
func (*ResultInfo) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{14} }

func (m *ResultInfo) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *ResultInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ResultInfo) GetLastBlockHeight() int64 {
	if m != nil {
		return m.LastBlockHeight
	}
	return 0
}

func (m *ResultInfo) GetLastBlockAppHash() []byte {
	if m != nil {
		return m.LastBlockAppHash
	}
	return nil
}

type ResultQuery struct {
	Result *types.Result `protobuf:"bytes,1,opt,name=Result" json:"Result,omitempty"`
}

func (m *ResultQuery) Reset()                    { *m = ResultQuery{} }
func (m *ResultQuery) String() string            { return proto.CompactTextString(m) }
func (*ResultQuery) ProtoMessage()               {}
func (*ResultQuery) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{15} }

func (m *ResultQuery) GetResult() *types.Result {
	if m != nil {
		return m.Result
	}
	return nil
}

type ResultRefuseList struct {
	Result []string `protobuf:"bytes,1,rep,name=Result" json:"Result,omitempty"`
}

func (m *ResultRefuseList) Reset()                    { *m = ResultRefuseList{} }
func (m *ResultRefuseList) String() string            { return proto.CompactTextString(m) }
func (*ResultRefuseList) ProtoMessage()               {}
func (*ResultRefuseList) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{16} }

func (m *ResultRefuseList) GetResult() []string {
	if m != nil {
		return m.Result
	}
	return nil
}

type ResultUnsafeFlushMempool struct {
}

func (m *ResultUnsafeFlushMempool) Reset()                    { *m = ResultUnsafeFlushMempool{} }
func (m *ResultUnsafeFlushMempool) String() string            { return proto.CompactTextString(m) }
func (*ResultUnsafeFlushMempool) ProtoMessage()               {}
func (*ResultUnsafeFlushMempool) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{17} }

type ResultUnsafeSetConfig struct {
}

func (m *ResultUnsafeSetConfig) Reset()                    { *m = ResultUnsafeSetConfig{} }
func (m *ResultUnsafeSetConfig) String() string            { return proto.CompactTextString(m) }
func (*ResultUnsafeSetConfig) ProtoMessage()               {}
func (*ResultUnsafeSetConfig) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{18} }

type ResultUnsafeProfile struct {
}

func (m *ResultUnsafeProfile) Reset()                    { *m = ResultUnsafeProfile{} }
func (m *ResultUnsafeProfile) String() string            { return proto.CompactTextString(m) }
func (*ResultUnsafeProfile) ProtoMessage()               {}
func (*ResultUnsafeProfile) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{19} }

type ResultSubscribe struct {
}

func (m *ResultSubscribe) Reset()                    { *m = ResultSubscribe{} }
func (m *ResultSubscribe) String() string            { return proto.CompactTextString(m) }
func (*ResultSubscribe) ProtoMessage()               {}
func (*ResultSubscribe) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{20} }

type ResultUnsubscribe struct {
}

func (m *ResultUnsubscribe) Reset()                    { *m = ResultUnsubscribe{} }
func (m *ResultUnsubscribe) String() string            { return proto.CompactTextString(m) }
func (*ResultUnsubscribe) ProtoMessage()               {}
func (*ResultUnsubscribe) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{21} }

type ResultEvent struct {
	Name  string           `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Type  events.EventType `protobuf:"varint,2,opt,name=Type,proto3,enum=events.EventType" json:"Type,omitempty"`
	Event []byte           `protobuf:"bytes,3,opt,name=Event,proto3" json:"Event,omitempty"`
}

func (m *ResultEvent) Reset()                    { *m = ResultEvent{} }
func (m *ResultEvent) String() string            { return proto.CompactTextString(m) }
func (*ResultEvent) ProtoMessage()               {}
func (*ResultEvent) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{22} }

func (m *ResultEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResultEvent) GetType() events.EventType {
	if m != nil {
		return m.Type
	}
	return events.EventType_EventNewBlock
}

func (m *ResultEvent) GetEvent() []byte {
	if m != nil {
		return m.Event
	}
	return nil
}

type ResultSurveillance struct {
	NanoSecsPerTx int64  `protobuf:"varint,1,opt,name=NanoSecsPerTx,proto3" json:"NanoSecsPerTx,omitempty"`
	Height        int64  `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
	Addr          string `protobuf:"bytes,3,opt,name=Addr,proto3" json:"Addr,omitempty"`
	IsValidators  bool   `protobuf:"varint,4,opt,name=IsValidators,proto3" json:"IsValidators,omitempty"`
	NumValidators int64  `protobuf:"varint,5,opt,name=NumValidators,proto3" json:"NumValidators,omitempty"`
	NumPeers      int64  `protobuf:"varint,6,opt,name=NumPeers,proto3" json:"NumPeers,omitempty"`
	RunningTime   int64  `protobuf:"varint,7,opt,name=RunningTime,proto3" json:"RunningTime,omitempty"`
	PubKey        string `protobuf:"bytes,8,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
}

func (m *ResultSurveillance) Reset()                    { *m = ResultSurveillance{} }
func (m *ResultSurveillance) String() string            { return proto.CompactTextString(m) }
func (*ResultSurveillance) ProtoMessage()               {}
func (*ResultSurveillance) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{23} }

func (m *ResultSurveillance) GetNanoSecsPerTx() int64 {
	if m != nil {
		return m.NanoSecsPerTx
	}
	return 0
}

func (m *ResultSurveillance) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ResultSurveillance) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *ResultSurveillance) GetIsValidators() bool {
	if m != nil {
		return m.IsValidators
	}
	return false
}

func (m *ResultSurveillance) GetNumValidators() int64 {
	if m != nil {
		return m.NumValidators
	}
	return 0
}

func (m *ResultSurveillance) GetNumPeers() int64 {
	if m != nil {
		return m.NumPeers
	}
	return 0
}

func (m *ResultSurveillance) GetRunningTime() int64 {
	if m != nil {
		return m.RunningTime
	}
	return 0
}

func (m *ResultSurveillance) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

type ResultCoreVersion struct {
	Version    string `protobuf:"bytes,1,opt,name=Version,proto3" json:"Version,omitempty"`
	AppName    string `protobuf:"bytes,2,opt,name=AppName,proto3" json:"AppName,omitempty"`
	AppVersion string `protobuf:"bytes,3,opt,name=AppVersion,proto3" json:"AppVersion,omitempty"`
	Hash       string `protobuf:"bytes,4,opt,name=Hash,proto3" json:"Hash,omitempty"`
}

func (m *ResultCoreVersion) Reset()                    { *m = ResultCoreVersion{} }
func (m *ResultCoreVersion) String() string            { return proto.CompactTextString(m) }
func (*ResultCoreVersion) ProtoMessage()               {}
func (*ResultCoreVersion) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{24} }

func (m *ResultCoreVersion) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *ResultCoreVersion) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *ResultCoreVersion) GetAppVersion() string {
	if m != nil {
		return m.AppVersion
	}
	return ""
}

func (m *ResultCoreVersion) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

type ResultNonEmptyHeights struct {
	Heights []int64 `protobuf:"varint,1,rep,packed,name=Heights" json:"Heights,omitempty"`
}

func (m *ResultNonEmptyHeights) Reset()                    { *m = ResultNonEmptyHeights{} }
func (m *ResultNonEmptyHeights) String() string            { return proto.CompactTextString(m) }
func (*ResultNonEmptyHeights) ProtoMessage()               {}
func (*ResultNonEmptyHeights) Descriptor() ([]byte, []int) { return fileDescriptorRpc, []int{25} }

func (m *ResultNonEmptyHeights) GetHeights() []int64 {
	if m != nil {
		return m.Heights
	}
	return nil
}

func init() {
	proto.RegisterType((*ResultBlockchainInfo)(nil), "rpc.ResultBlockchainInfo")
	proto.RegisterType((*ResultGenesis)(nil), "rpc.ResultGenesis")
	proto.RegisterType((*ResultBlock)(nil), "rpc.ResultBlock")
	proto.RegisterType((*ResultOrgs)(nil), "rpc.ResultOrgs")
	proto.RegisterType((*ResultStatus)(nil), "rpc.ResultStatus")
	proto.RegisterType((*Peer)(nil), "rpc.Peer")
	proto.RegisterType((*ResultNetInfo)(nil), "rpc.ResultNetInfo")
	proto.RegisterType((*ResultValidators)(nil), "rpc.ResultValidators")
	proto.RegisterType((*ResultDumpConsensusState)(nil), "rpc.ResultDumpConsensusState")
	proto.RegisterType((*ResultBroadcastTx)(nil), "rpc.ResultBroadcastTx")
	proto.RegisterType((*ResultRequestSpecialOP)(nil), "rpc.ResultRequestSpecialOP")
	proto.RegisterType((*ResultBroadcastTxCommit)(nil), "rpc.ResultBroadcastTxCommit")
	proto.RegisterType((*ResultUnconfirmedTxs)(nil), "rpc.ResultUnconfirmedTxs")
	proto.RegisterType((*ResultInfo)(nil), "rpc.ResultInfo")
	proto.RegisterType((*ResultQuery)(nil), "rpc.ResultQuery")
	proto.RegisterType((*ResultRefuseList)(nil), "rpc.ResultRefuseList")
	proto.RegisterType((*ResultUnsafeFlushMempool)(nil), "rpc.ResultUnsafeFlushMempool")
	proto.RegisterType((*ResultUnsafeSetConfig)(nil), "rpc.ResultUnsafeSetConfig")
	proto.RegisterType((*ResultUnsafeProfile)(nil), "rpc.ResultUnsafeProfile")
	proto.RegisterType((*ResultSubscribe)(nil), "rpc.ResultSubscribe")
	proto.RegisterType((*ResultUnsubscribe)(nil), "rpc.ResultUnsubscribe")
	proto.RegisterType((*ResultEvent)(nil), "rpc.ResultEvent")
	proto.RegisterType((*ResultSurveillance)(nil), "rpc.ResultSurveillance")
	proto.RegisterType((*ResultCoreVersion)(nil), "rpc.ResultCoreVersion")
	proto.RegisterType((*ResultNonEmptyHeights)(nil), "rpc.ResultNonEmptyHeights")
	proto.RegisterEnum("rpc.Type", Type_name, Type_value)
}
func (m *ResultBlockchainInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultBlockchainInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.LastHeight != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.LastHeight))
	}
	if len(m.BlockMetas) > 0 {
		for _, msg := range m.BlockMetas {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ResultGenesis) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultGenesis) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.GenesisJSON) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.GenesisJSON)))
		i += copy(dAtA[i:], m.GenesisJSON)
	}
	return i, nil
}

func (m *ResultBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BlockMeta != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.BlockMeta.Size()))
		n1, err := m.BlockMeta.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Block != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Block.Size()))
		n2, err := m.Block.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *ResultOrgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultOrgs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ResultStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeInfoJSON) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.NodeInfoJSON)))
		i += copy(dAtA[i:], m.NodeInfoJSON)
	}
	if m.Pubkey != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Pubkey.Size()))
		n3, err := m.Pubkey.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.LatestBlockHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.LatestBlockHash)))
		i += copy(dAtA[i:], m.LatestBlockHash)
	}
	if len(m.LatestAppHash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.LatestAppHash)))
		i += copy(dAtA[i:], m.LatestAppHash)
	}
	if m.LatestBlockHeight != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.LatestBlockHeight))
	}
	if m.LatestBlockTime != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.LatestBlockTime))
	}
	return i, nil
}

func (m *Peer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Peer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NodeInfoJSON) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.NodeInfoJSON)))
		i += copy(dAtA[i:], m.NodeInfoJSON)
	}
	if m.IsOutbound {
		dAtA[i] = 0x10
		i++
		if m.IsOutbound {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.ConnectionStatusJSON) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.ConnectionStatusJSON)))
		i += copy(dAtA[i:], m.ConnectionStatusJSON)
	}
	return i, nil
}

func (m *ResultNetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultNetInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Listening {
		dAtA[i] = 0x8
		i++
		if m.Listening {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Listeners) > 0 {
		for _, s := range m.Listeners {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Peers) > 0 {
		for _, msg := range m.Peers {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRpc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ResultValidators) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultValidators) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.BlockHeight))
	}
	if len(m.ValidatorsJSON) > 0 {
		for _, b := range m.ValidatorsJSON {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRpc(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *ResultDumpConsensusState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultDumpConsensusState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.RoundState) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.RoundState)))
		i += copy(dAtA[i:], m.RoundState)
	}
	if len(m.PeerRoundStates) > 0 {
		for _, s := range m.PeerRoundStates {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ResultBroadcastTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultBroadcastTx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Result.Size()))
		n4, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ResultRequestSpecialOP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultRequestSpecialOP) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Result.Size()))
		n5, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *ResultBroadcastTxCommit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultBroadcastTxCommit) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Result.Size()))
		n6, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *ResultUnconfirmedTxs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultUnconfirmedTxs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.N != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.N))
	}
	if len(m.Txs) > 0 {
		for _, b := range m.Txs {
			dAtA[i] = 0x12
			i++
			i = encodeVarintRpc(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *ResultInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Version) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if m.LastBlockHeight != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.LastBlockHeight))
	}
	if len(m.LastBlockAppHash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.LastBlockAppHash)))
		i += copy(dAtA[i:], m.LastBlockAppHash)
	}
	return i, nil
}

func (m *ResultQuery) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultQuery) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Result.Size()))
		n7, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *ResultRefuseList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultRefuseList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, s := range m.Result {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *ResultUnsafeFlushMempool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultUnsafeFlushMempool) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResultUnsafeSetConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultUnsafeSetConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResultUnsafeProfile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultUnsafeProfile) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResultSubscribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultSubscribe) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResultUnsubscribe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultUnsubscribe) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ResultEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Type))
	}
	if len(m.Event) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Event)))
		i += copy(dAtA[i:], m.Event)
	}
	return i, nil
}

func (m *ResultSurveillance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultSurveillance) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NanoSecsPerTx != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.NanoSecsPerTx))
	}
	if m.Height != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.Height))
	}
	if len(m.Addr) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Addr)))
		i += copy(dAtA[i:], m.Addr)
	}
	if m.IsValidators {
		dAtA[i] = 0x20
		i++
		if m.IsValidators {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.NumValidators != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.NumValidators))
	}
	if m.NumPeers != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.NumPeers))
	}
	if m.RunningTime != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintRpc(dAtA, i, uint64(m.RunningTime))
	}
	if len(m.PubKey) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.PubKey)))
		i += copy(dAtA[i:], m.PubKey)
	}
	return i, nil
}

func (m *ResultCoreVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultCoreVersion) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Version) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Version)))
		i += copy(dAtA[i:], m.Version)
	}
	if len(m.AppName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.AppName)))
		i += copy(dAtA[i:], m.AppName)
	}
	if len(m.AppVersion) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.AppVersion)))
		i += copy(dAtA[i:], m.AppVersion)
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintRpc(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	return i, nil
}

func (m *ResultNonEmptyHeights) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultNonEmptyHeights) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Heights) > 0 {
		dAtA9 := make([]byte, len(m.Heights)*10)
		var j8 int
		for _, num1 := range m.Heights {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		dAtA[i] = 0xa
		i++
		i = encodeVarintRpc(dAtA, i, uint64(j8))
		i += copy(dAtA[i:], dAtA9[:j8])
	}
	return i, nil
}

func encodeFixed64Rpc(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Rpc(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintRpc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ResultBlockchainInfo) Size() (n int) {
	var l int
	_ = l
	if m.LastHeight != 0 {
		n += 1 + sovRpc(uint64(m.LastHeight))
	}
	if len(m.BlockMetas) > 0 {
		for _, e := range m.BlockMetas {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *ResultGenesis) Size() (n int) {
	var l int
	_ = l
	l = len(m.GenesisJSON)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *ResultBlock) Size() (n int) {
	var l int
	_ = l
	if m.BlockMeta != nil {
		l = m.BlockMeta.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *ResultOrgs) Size() (n int) {
	var l int
	_ = l
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *ResultStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.NodeInfoJSON)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Pubkey != nil {
		l = m.Pubkey.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.LatestBlockHash)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.LatestAppHash)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.LatestBlockHeight != 0 {
		n += 1 + sovRpc(uint64(m.LatestBlockHeight))
	}
	if m.LatestBlockTime != 0 {
		n += 1 + sovRpc(uint64(m.LatestBlockTime))
	}
	return n
}

func (m *Peer) Size() (n int) {
	var l int
	_ = l
	l = len(m.NodeInfoJSON)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.IsOutbound {
		n += 2
	}
	l = len(m.ConnectionStatusJSON)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *ResultNetInfo) Size() (n int) {
	var l int
	_ = l
	if m.Listening {
		n += 2
	}
	if len(m.Listeners) > 0 {
		for _, s := range m.Listeners {
			l = len(s)
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	if len(m.Peers) > 0 {
		for _, e := range m.Peers {
			l = e.Size()
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *ResultValidators) Size() (n int) {
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovRpc(uint64(m.BlockHeight))
	}
	if len(m.ValidatorsJSON) > 0 {
		for _, b := range m.ValidatorsJSON {
			l = len(b)
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *ResultDumpConsensusState) Size() (n int) {
	var l int
	_ = l
	l = len(m.RoundState)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if len(m.PeerRoundStates) > 0 {
		for _, s := range m.PeerRoundStates {
			l = len(s)
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *ResultBroadcastTx) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *ResultRequestSpecialOP) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *ResultBroadcastTxCommit) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *ResultUnconfirmedTxs) Size() (n int) {
	var l int
	_ = l
	if m.N != 0 {
		n += 1 + sovRpc(uint64(m.N))
	}
	if len(m.Txs) > 0 {
		for _, b := range m.Txs {
			l = len(b)
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *ResultInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.LastBlockHeight != 0 {
		n += 1 + sovRpc(uint64(m.LastBlockHeight))
	}
	l = len(m.LastBlockAppHash)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *ResultQuery) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *ResultRefuseList) Size() (n int) {
	var l int
	_ = l
	if len(m.Result) > 0 {
		for _, s := range m.Result {
			l = len(s)
			n += 1 + l + sovRpc(uint64(l))
		}
	}
	return n
}

func (m *ResultUnsafeFlushMempool) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ResultUnsafeSetConfig) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ResultUnsafeProfile) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ResultSubscribe) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ResultUnsubscribe) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ResultEvent) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovRpc(uint64(m.Type))
	}
	l = len(m.Event)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *ResultSurveillance) Size() (n int) {
	var l int
	_ = l
	if m.NanoSecsPerTx != 0 {
		n += 1 + sovRpc(uint64(m.NanoSecsPerTx))
	}
	if m.Height != 0 {
		n += 1 + sovRpc(uint64(m.Height))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	if m.IsValidators {
		n += 2
	}
	if m.NumValidators != 0 {
		n += 1 + sovRpc(uint64(m.NumValidators))
	}
	if m.NumPeers != 0 {
		n += 1 + sovRpc(uint64(m.NumPeers))
	}
	if m.RunningTime != 0 {
		n += 1 + sovRpc(uint64(m.RunningTime))
	}
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *ResultCoreVersion) Size() (n int) {
	var l int
	_ = l
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.AppName)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.AppVersion)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovRpc(uint64(l))
	}
	return n
}

func (m *ResultNonEmptyHeights) Size() (n int) {
	var l int
	_ = l
	if len(m.Heights) > 0 {
		l = 0
		for _, e := range m.Heights {
			l += sovRpc(uint64(e))
		}
		n += 1 + sovRpc(uint64(l)) + l
	}
	return n
}

func sovRpc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRpc(x uint64) (n int) {
	return sovRpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ResultBlockchainInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultBlockchainInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultBlockchainInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeight", wireType)
			}
			m.LastHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeight |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockMetas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockMetas = append(m.BlockMetas, &types.BlockMeta{})
			if err := m.BlockMetas[len(m.BlockMetas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultGenesis) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultGenesis: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultGenesis: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisJSON", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisJSON = append(m.GenesisJSON[:0], dAtA[iNdEx:postIndex]...)
			if m.GenesisJSON == nil {
				m.GenesisJSON = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockMeta", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockMeta == nil {
				m.BlockMeta = &types.BlockMeta{}
			}
			if err := m.BlockMeta.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &types.Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultOrgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultOrgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultOrgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfoJSON", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeInfoJSON = append(m.NodeInfoJSON[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeInfoJSON == nil {
				m.NodeInfoJSON = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pubkey == nil {
				m.Pubkey = &types.PubKey{}
			}
			if err := m.Pubkey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestBlockHash = append(m.LatestBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.LatestBlockHash == nil {
				m.LatestBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestAppHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestAppHash = append(m.LatestAppHash[:0], dAtA[iNdEx:postIndex]...)
			if m.LatestAppHash == nil {
				m.LatestAppHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockHeight", wireType)
			}
			m.LatestBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestBlockHeight |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockTime", wireType)
			}
			m.LatestBlockTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestBlockTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Peer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Peer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Peer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeInfoJSON", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeInfoJSON = append(m.NodeInfoJSON[:0], dAtA[iNdEx:postIndex]...)
			if m.NodeInfoJSON == nil {
				m.NodeInfoJSON = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOutbound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOutbound = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionStatusJSON", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionStatusJSON = append(m.ConnectionStatusJSON[:0], dAtA[iNdEx:postIndex]...)
			if m.ConnectionStatusJSON == nil {
				m.ConnectionStatusJSON = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultNetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultNetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultNetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listening", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Listening = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Listeners", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Listeners = append(m.Listeners, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peers = append(m.Peers, &Peer{})
			if err := m.Peers[len(m.Peers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultValidators) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultValidators: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultValidators: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsJSON", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorsJSON = append(m.ValidatorsJSON, make([]byte, postIndex-iNdEx))
			copy(m.ValidatorsJSON[len(m.ValidatorsJSON)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultDumpConsensusState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultDumpConsensusState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultDumpConsensusState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoundState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeerRoundStates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PeerRoundStates = append(m.PeerRoundStates, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultBroadcastTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultBroadcastTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultBroadcastTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &types.Result{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultRequestSpecialOP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultRequestSpecialOP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultRequestSpecialOP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &types.Result{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultBroadcastTxCommit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultBroadcastTxCommit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultBroadcastTxCommit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &types.Result{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultUnconfirmedTxs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultUnconfirmedTxs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultUnconfirmedTxs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, make([]byte, postIndex-iNdEx))
			copy(m.Txs[len(m.Txs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}

func (m *ResultInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockHeight", wireType)
			}
			m.LastBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastBlockHeight |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockAppHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastBlockAppHash = append(m.LastBlockAppHash[:0], dAtA[iNdEx:postIndex]...)
			if m.LastBlockAppHash == nil {
				m.LastBlockAppHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultQuery) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &types.Result{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultRefuseList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultRefuseList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultRefuseList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultUnsafeFlushMempool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultUnsafeFlushMempool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultUnsafeFlushMempool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultUnsafeSetConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultUnsafeSetConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultUnsafeSetConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultUnsafeProfile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultUnsafeProfile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultUnsafeProfile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultSubscribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultSubscribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultSubscribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultUnsubscribe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultUnsubscribe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultUnsubscribe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (events.EventType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Event = append(m.Event[:0], dAtA[iNdEx:postIndex]...)
			if m.Event == nil {
				m.Event = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultSurveillance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultSurveillance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultSurveillance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NanoSecsPerTx", wireType)
			}
			m.NanoSecsPerTx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NanoSecsPerTx |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsValidators", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsValidators = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumValidators", wireType)
			}
			m.NumValidators = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumValidators |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPeers", wireType)
			}
			m.NumPeers = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumPeers |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunningTime", wireType)
			}
			m.RunningTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunningTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultCoreVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultCoreVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultCoreVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultNonEmptyHeights) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultNonEmptyHeights: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultNonEmptyHeights: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (int64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Heights = append(m.Heights, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowRpc
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthRpc
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowRpc
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Heights = append(m.Heights, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Heights", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRpc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRpc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRpc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRpc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRpc   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rpc.proto", fileDescriptorRpc) }

var fileDescriptorRpc = []byte{
	// 1287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xef, 0xc6, 0x49, 0x13, 0xbf, 0x38, 0xe9, 0x64, 0x92, 0x34, 0x6e, 0x04, 0x26, 0x2c, 0x14,
	0x45, 0x05, 0x39, 0xb4, 0x20, 0x0e, 0x08, 0x41, 0xd3, 0xb4, 0xd0, 0x42, 0xeb, 0x98, 0x49, 0x52,
	0x2e, 0x08, 0xb1, 0x5e, 0xbf, 0xd8, 0xab, 0xee, 0xce, 0x4e, 0x77, 0x76, 0xab, 0x04, 0x24, 0x44,
	0x39, 0x70, 0xee, 0x91, 0x23, 0xff, 0xee, 0x7c, 0x0d, 0x8e, 0x7c, 0x04, 0x54, 0x2e, 0x7c, 0x0c,
	0x34, 0x6f, 0x66, 0xed, 0xb5, 0xd3, 0x43, 0xb8, 0x24, 0x33, 0xbf, 0xf7, 0x66, 0xde, 0x9f, 0xf9,
	0xbd, 0xdf, 0x1a, 0xea, 0x99, 0x0a, 0xdb, 0x2a, 0x4b, 0xf3, 0x94, 0xd7, 0x32, 0x15, 0x6e, 0x7e,
	0x30, 0x88, 0xf2, 0x38, 0xe8, 0xb5, 0xbf, 0x19, 0xa6, 0x72, 0x10, 0xc8, 0x54, 0xc6, 0x91, 0xc4,
	0x76, 0x98, 0x26, 0x3b, 0x81, 0x94, 0x3b, 0x81, 0x1c, 0x44, 0x12, 0x77, 0xc8, 0x5f, 0xef, 0xe4,
	0xa7, 0x0a, 0xdd, 0x5f, 0x7b, 0xc5, 0xe6, 0x87, 0xff, 0xe3, 0x34, 0x3e, 0x41, 0x99, 0x97, 0xff,
	0xec, 0x79, 0x7f, 0x08, 0x6b, 0x02, 0x75, 0x11, 0xe7, 0xb7, 0xe2, 0x34, 0x7c, 0x14, 0x0e, 0x83,
	0x48, 0xde, 0x93, 0xc7, 0x29, 0x6f, 0x01, 0xdc, 0x0f, 0x74, 0x7e, 0x17, 0xa3, 0xc1, 0x30, 0x6f,
	0x7a, 0x5b, 0xde, 0x76, 0x4d, 0x54, 0x10, 0xfe, 0x36, 0x00, 0x9d, 0x78, 0x80, 0x79, 0xa0, 0x9b,
	0x33, 0x5b, 0xb5, 0xed, 0xc5, 0x1b, 0xac, 0x6d, 0x33, 0x1b, 0x19, 0x44, 0xc5, 0xc7, 0xbf, 0x0e,
	0x4b, 0x36, 0xd2, 0x27, 0x28, 0x51, 0x47, 0x9a, 0x6f, 0xc1, 0xa2, 0x5b, 0x7e, 0x7a, 0xb0, 0xdf,
	0xa1, 0x18, 0x0d, 0x51, 0x85, 0xfc, 0x00, 0x16, 0x2b, 0xc9, 0xf1, 0x36, 0xd4, 0x47, 0xf7, 0x91,
	0xfb, 0x8b, 0x42, 0x8e, 0x5d, 0xb8, 0x0f, 0x73, 0xb4, 0x69, 0xce, 0x90, 0x6f, 0xa3, 0xea, 0x2b,
	0xac, 0xc9, 0xf7, 0x01, 0x6c, 0x88, 0xfd, 0x6c, 0xa0, 0xf9, 0x1a, 0xcc, 0x75, 0x82, 0x04, 0x75,
	0xd3, 0xdb, 0xaa, 0x6d, 0xd7, 0x85, 0xdd, 0xf8, 0x4f, 0x67, 0xa0, 0x61, 0x9d, 0x0e, 0xf2, 0x20,
	0x2f, 0x34, 0xf7, 0xa1, 0xd1, 0x49, 0xfb, 0x68, 0x1a, 0x55, 0x49, 0x7d, 0x02, 0xe3, 0x57, 0xe1,
	0x62, 0xb7, 0xe8, 0x3d, 0xc2, 0x53, 0x17, 0x7d, 0xc9, 0x45, 0xef, 0x16, 0xbd, 0xcf, 0xf0, 0x54,
	0x38, 0x23, 0xdf, 0x86, 0x4b, 0xf7, 0x83, 0x1c, 0xb5, 0x2d, 0xf1, 0x6e, 0xa0, 0x87, 0xcd, 0x1a,
	0xdd, 0x36, 0x0d, 0xf3, 0xd7, 0x61, 0xc9, 0x42, 0xbb, 0x4a, 0x91, 0xdf, 0x2c, 0xf9, 0x4d, 0x82,
	0xfc, 0x2d, 0x58, 0xa9, 0x1e, 0xb4, 0xcf, 0x37, 0x47, 0xcf, 0x77, 0xd6, 0x30, 0x15, 0xfd, 0x30,
	0x4a, 0xb0, 0x79, 0x91, 0x7c, 0xa7, 0x61, 0xff, 0x3b, 0x98, 0xed, 0x22, 0x66, 0xe7, 0x2a, 0xbd,
	0x05, 0x70, 0x4f, 0xef, 0x17, 0x79, 0x2f, 0x2d, 0x64, 0x9f, 0xca, 0x5f, 0x10, 0x15, 0x84, 0xdf,
	0x80, 0xb5, 0xbd, 0x54, 0x4a, 0x0c, 0xf3, 0x28, 0x95, 0xb6, 0xa5, 0x74, 0x97, 0x2d, 0xfc, 0x85,
	0x36, 0x3f, 0x2e, 0xd9, 0xd3, 0xc1, 0x9c, 0x08, 0xfa, 0x12, 0xd4, 0xef, 0x47, 0x3a, 0x47, 0x19,
	0xc9, 0x01, 0x65, 0xb1, 0x20, 0xc6, 0xc0, 0xd8, 0x8a, 0x99, 0x65, 0x67, 0x5d, 0x8c, 0x01, 0xfe,
	0x0a, 0xcc, 0x29, 0x34, 0x96, 0x1a, 0xf1, 0xb6, 0xde, 0x36, 0x23, 0x69, 0xca, 0x13, 0x16, 0xf7,
	0xbf, 0x04, 0x66, 0xa3, 0x3d, 0x0c, 0xe2, 0xa8, 0x1f, 0xe4, 0x69, 0x46, 0x74, 0xad, 0xf6, 0xd4,
	0x8e, 0x44, 0x15, 0xe2, 0x6f, 0xc0, 0xf2, 0xd8, 0x9f, 0x2a, 0x32, 0x91, 0x1b, 0x62, 0x0a, 0xf5,
	0xfb, 0xd0, 0xb4, 0xb7, 0xdf, 0x2e, 0x12, 0xb5, 0x97, 0x4a, 0x8d, 0x52, 0x17, 0xda, 0x14, 0x8b,
	0xa6, 0x77, 0xc2, 0x34, 0x89, 0x76, 0x14, 0xa4, 0x2e, 0x2a, 0x88, 0x79, 0x31, 0x4a, 0x74, 0x84,
	0x94, 0xe5, 0x4d, 0xc3, 0xfe, 0xfb, 0xb0, 0xe2, 0x86, 0x27, 0x4b, 0x83, 0x7e, 0x18, 0xe8, 0xfc,
	0xf0, 0xc4, 0xb0, 0xd2, 0x82, 0x6e, 0x7e, 0x4a, 0x56, 0x5a, 0x50, 0x38, 0xa3, 0xff, 0x11, 0x5c,
	0x76, 0x08, 0x3e, 0x2e, 0x50, 0xe7, 0x07, 0x0a, 0xc3, 0x28, 0x88, 0xf7, 0xbb, 0xe7, 0xbd, 0xe0,
	0x26, 0x6c, 0x9c, 0x09, 0xbe, 0x97, 0x26, 0x49, 0x94, 0x9f, 0xf7, 0x86, 0xf7, 0x4a, 0x61, 0x3a,
	0x92, 0x61, 0x2a, 0x8f, 0xa3, 0x2c, 0xc1, 0xfe, 0xe1, 0x89, 0xe6, 0x0d, 0xf0, 0x3a, 0xae, 0xf9,
	0x5e, 0x87, 0x33, 0xa8, 0x1d, 0x9e, 0x68, 0xd7, 0x67, 0xb3, 0xf4, 0xdf, 0x2c, 0x23, 0x77, 0x8a,
	0x64, 0x37, 0x0b, 0x87, 0xd1, 0x13, 0xec, 0xd3, 0x23, 0x69, 0xe3, 0xdc, 0x29, 0x12, 0x77, 0xd8,
	0x2c, 0xfd, 0x67, 0x5e, 0x39, 0xfe, 0xc4, 0x29, 0x0e, 0xb3, 0xb7, 0x03, 0xa7, 0x2d, 0x75, 0x41,
	0x6b, 0xde, 0x84, 0xf9, 0x87, 0x98, 0xe9, 0x28, 0x95, 0xc4, 0xe4, 0xba, 0x28, 0xb7, 0x76, 0x78,
	0x26, 0x07, 0xad, 0x56, 0x0e, 0xcf, 0xe4, 0x98, 0x5d, 0x03, 0x36, 0x82, 0x26, 0xa7, 0xf7, 0x0c,
	0xee, 0xbf, 0x5b, 0x6a, 0xde, 0xe7, 0x05, 0x66, 0xa7, 0xe7, 0xed, 0xd6, 0xb5, 0x92, 0xb0, 0x02,
	0x8f, 0x0b, 0x8d, 0x86, 0xea, 0xfc, 0x72, 0xe5, 0xa8, 0x61, 0x48, 0xe9, 0xbb, 0x59, 0xd2, 0xef,
	0x48, 0xea, 0xe0, 0x18, 0x3f, 0x8e, 0x0b, 0x3d, 0x7c, 0x80, 0x89, 0x4a, 0xd3, 0xd8, 0xdf, 0x80,
	0xf5, 0xaa, 0xed, 0x00, 0xf3, 0x3d, 0xd3, 0xfc, 0x81, 0xbf, 0x0e, 0xab, 0x55, 0x43, 0x37, 0x4b,
	0x8f, 0xa3, 0x18, 0xfd, 0x15, 0xb8, 0xe4, 0x94, 0xb1, 0xe8, 0xe9, 0x30, 0x8b, 0x7a, 0xe8, 0xaf,
	0x96, 0xbc, 0x3b, 0x92, 0x7a, 0x04, 0x7e, 0x55, 0x56, 0x75, 0xc7, 0x7c, 0x7c, 0x4c, 0xa3, 0x8d,
	0xb4, 0x96, 0x8d, 0x36, 0x6b, 0x7e, 0x15, 0x66, 0x0f, 0x4f, 0x15, 0x52, 0x97, 0x97, 0x6f, 0xac,
	0xb4, 0xdd, 0x67, 0x8a, 0x0e, 0x18, 0x83, 0x20, 0xb3, 0x91, 0x68, 0x82, 0x9c, 0x5a, 0xd8, 0x8d,
	0xff, 0xe3, 0x0c, 0xf0, 0x32, 0x91, 0xec, 0x09, 0x46, 0x71, 0x1c, 0xc8, 0x10, 0x8d, 0x66, 0x76,
	0x02, 0x99, 0x1e, 0x60, 0xa8, 0xbb, 0x98, 0x1d, 0x9e, 0xb8, 0xb7, 0x9f, 0x04, 0x4d, 0xa3, 0xdc,
	0xfb, 0xcd, 0x90, 0xd9, 0xed, 0x4c, 0x96, 0xbb, 0xfd, 0x7e, 0x46, 0x91, 0xea, 0x82, 0xd6, 0x46,
	0xff, 0xee, 0xe9, 0xf1, 0x3c, 0xd3, 0x33, 0x2e, 0x88, 0x09, 0x8c, 0xa2, 0x16, 0x49, 0xc5, 0x69,
	0xce, 0x45, 0xad, 0x82, 0x7c, 0x13, 0x16, 0x3a, 0x45, 0xd2, 0x25, 0x1d, 0xb2, 0xa2, 0x3b, 0xda,
	0x1b, 0xad, 0x11, 0x85, 0x34, 0x4a, 0x46, 0x9a, 0x3c, 0x6f, 0xb5, 0xa6, 0x02, 0x99, 0x9c, 0xed,
	0x97, 0xa4, 0xb9, 0x40, 0xd9, 0xb9, 0x9d, 0xff, 0x6d, 0xd9, 0xfd, 0xbd, 0x34, 0xc3, 0x92, 0xa9,
	0x15, 0x0e, 0x7b, 0x93, 0x1c, 0x6e, 0xc2, 0xfc, 0xae, 0x52, 0xf4, 0x16, 0x8e, 0xdd, 0x6e, 0x6b,
	0x84, 0x68, 0x57, 0xa9, 0xf2, 0x98, 0x6d, 0x41, 0x05, 0x31, 0xcd, 0x19, 0xf1, 0xb8, 0x2e, 0x68,
	0xed, 0x5f, 0x2f, 0xd9, 0xd3, 0x49, 0xe5, 0x9d, 0x44, 0xe5, 0xa7, 0xb6, 0x91, 0xda, 0x84, 0x71,
	0x4b, 0xe2, 0x62, 0x4d, 0x94, 0xdb, 0x6b, 0xff, 0xce, 0xda, 0x67, 0xe7, 0x8b, 0x30, 0x2f, 0x54,
	0xd8, 0x49, 0x25, 0xb2, 0x0b, 0x7c, 0x19, 0x40, 0xa8, 0xd0, 0xfd, 0x14, 0x60, 0x1e, 0x5f, 0x87,
	0x15, 0xa1, 0xc2, 0xc9, 0x9f, 0x28, 0x6c, 0x86, 0x37, 0x60, 0xa1, 0x84, 0x59, 0x8d, 0x5f, 0x06,
	0x6e, 0x6f, 0xa8, 0x86, 0x66, 0xb3, 0xbc, 0x09, 0x6b, 0x06, 0x9f, 0x96, 0x03, 0x36, 0xc7, 0x97,
	0xa0, 0x2e, 0x54, 0x68, 0xbf, 0x32, 0x6c, 0xcb, 0x45, 0x75, 0x1f, 0x18, 0xf6, 0x2a, 0x67, 0xd0,
	0x10, 0x2a, 0xbc, 0x1d, 0x05, 0xf1, 0x01, 0x62, 0x5f, 0x33, 0xdf, 0x25, 0x69, 0x7e, 0x2a, 0xb0,
	0xd7, 0xf8, 0x0a, 0x2c, 0x09, 0x15, 0x8e, 0x07, 0x8e, 0x31, 0x07, 0x8d, 0x1f, 0x99, 0xdd, 0xe4,
	0x57, 0x60, 0xdd, 0x5c, 0x72, 0x46, 0xe9, 0xd9, 0x2e, 0xe7, 0xb0, 0x6c, 0xd2, 0x1f, 0x2b, 0x24,
	0xfb, 0xda, 0x55, 0x3a, 0xa9, 0x79, 0x2c, 0x70, 0x35, 0x9c, 0x11, 0x53, 0xd6, 0xe3, 0x1b, 0xb0,
	0x4a, 0x59, 0x4c, 0xea, 0x34, 0x0b, 0x5d, 0x73, 0x48, 0x45, 0x98, 0x72, 0x99, 0x53, 0x61, 0x8f,
	0xf9, 0x0a, 0x15, 0x36, 0x1a, 0x59, 0xf6, 0xbd, 0xc7, 0x57, 0x29, 0x97, 0xca, 0xc8, 0xb2, 0xa7,
	0x1e, 0x5f, 0xa2, 0x2b, 0x68, 0xc2, 0xd8, 0x0f, 0x1e, 0xdf, 0xa0, 0x06, 0x4f, 0x29, 0x03, 0xfb,
	0xd9, 0xe3, 0x2d, 0xb8, 0x32, 0x36, 0xe4, 0x41, 0x96, 0xef, 0x75, 0x8f, 0x9c, 0x42, 0x64, 0xec,
	0x17, 0x8f, 0xbf, 0x0c, 0xcd, 0x8a, 0x3d, 0x55, 0x55, 0xf3, 0xaf, 0x93, 0xc7, 0xbf, 0xc8, 0xa2,
	0x1c, 0xef, 0x62, 0xa0, 0x9c, 0x03, 0xfb, 0xcd, 0xe3, 0x9b, 0xd4, 0xc2, 0xb3, 0x6a, 0xc5, 0x7e,
	0x2f, 0xf3, 0xae, 0x90, 0x9d, 0xfd, 0xe1, 0xf1, 0x35, 0xb8, 0x44, 0xf5, 0x8d, 0x95, 0x80, 0x3d,
	0xf3, 0x6e, 0xb1, 0x3f, 0x9f, 0xb7, 0xbc, 0xbf, 0x9e, 0xb7, 0xbc, 0xbf, 0x9f, 0xb7, 0xbc, 0x9f,
	0xfe, 0x69, 0x5d, 0xe8, 0x5d, 0xa4, 0xdf, 0xc0, 0xef, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff, 0xfe,
	0x29, 0xa7, 0xe5, 0x93, 0x0b, 0x00, 0x00,
}
