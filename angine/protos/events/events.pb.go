// Code generated by protoc-gen-gogo.
// source: events.proto
// DO NOT EDIT!

/*
	Package events is a generated protocol buffer package.

	It is generated from these files:
		events.proto

	It has these top-level messages:
		EventDataNewBlock
		EventDataNewBlockHeader
		EventDataTx
		EventDataRoundState
		EventDataVote
*/
package events

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/Baptist-Publication/chorus/angine/protos/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EventType int32

const (
	EventType_EventNewBlock          EventType = 0
	EventType_EventNewBlockHeader    EventType = 1
	EventType_EventTx                EventType = 2
	EventType_EventRoundState        EventType = 3
	EventType_EventVote              EventType = 4
	EventType_EventSwitchToConsensus EventType = 5
	EventType_EventHookNewRound      EventType = 6
	EventType_EventHookPropose       EventType = 7
	EventType_EventHookPrecommit     EventType = 8
	EventType_EventHookCommit        EventType = 9
	EventType_EventHookExecute       EventType = 10
)

var EventType_name = map[int32]string{
	0:  "EventNewBlock",
	1:  "EventNewBlockHeader",
	2:  "EventTx",
	3:  "EventRoundState",
	4:  "EventVote",
	5:  "EventSwitchToConsensus",
	6:  "EventHookNewRound",
	7:  "EventHookPropose",
	8:  "EventHookPrecommit",
	9:  "EventHookCommit",
	10: "EventHookExecute",
}
var EventType_value = map[string]int32{
	"EventNewBlock":          0,
	"EventNewBlockHeader":    1,
	"EventTx":                2,
	"EventRoundState":        3,
	"EventVote":              4,
	"EventSwitchToConsensus": 5,
	"EventHookNewRound":      6,
	"EventHookPropose":       7,
	"EventHookPrecommit":     8,
	"EventHookCommit":        9,
	"EventHookExecute":       10,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptorEvents, []int{0} }

type EventDataNewBlock struct {
	Block *types.Block `protobuf:"bytes,1,opt,name=Block" json:"Block,omitempty"`
}

func (m *EventDataNewBlock) Reset()                    { *m = EventDataNewBlock{} }
func (m *EventDataNewBlock) String() string            { return proto.CompactTextString(m) }
func (*EventDataNewBlock) ProtoMessage()               {}
func (*EventDataNewBlock) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{0} }

func (m *EventDataNewBlock) GetBlock() *types.Block {
	if m != nil {
		return m.Block
	}
	return nil
}

type EventDataNewBlockHeader struct {
	Header *types.Header `protobuf:"bytes,1,opt,name=Header" json:"Header,omitempty"`
}

func (m *EventDataNewBlockHeader) Reset()                    { *m = EventDataNewBlockHeader{} }
func (m *EventDataNewBlockHeader) String() string            { return proto.CompactTextString(m) }
func (*EventDataNewBlockHeader) ProtoMessage()               {}
func (*EventDataNewBlockHeader) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{1} }

func (m *EventDataNewBlockHeader) GetHeader() *types.Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type EventDataTx struct {
	Tx    []byte         `protobuf:"bytes,1,opt,name=Tx,proto3" json:"Tx,omitempty"`
	Data  []byte         `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
	Log   string         `protobuf:"bytes,3,opt,name=Log,proto3" json:"Log,omitempty"`
	Code  types.CodeType `protobuf:"varint,4,opt,name=Code,proto3,enum=types.CodeType" json:"Code,omitempty"`
	Error string         `protobuf:"bytes,5,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (m *EventDataTx) Reset()                    { *m = EventDataTx{} }
func (m *EventDataTx) String() string            { return proto.CompactTextString(m) }
func (*EventDataTx) ProtoMessage()               {}
func (*EventDataTx) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{2} }

func (m *EventDataTx) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *EventDataTx) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EventDataTx) GetLog() string {
	if m != nil {
		return m.Log
	}
	return ""
}

func (m *EventDataTx) GetCode() types.CodeType {
	if m != nil {
		return m.Code
	}
	return types.CodeType_OK
}

func (m *EventDataTx) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type EventDataRoundState struct {
	Height int64  `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Round  int64  `protobuf:"varint,2,opt,name=Round,proto3" json:"Round,omitempty"`
	Step   string `protobuf:"bytes,3,opt,name=Step,proto3" json:"Step,omitempty"`
}

func (m *EventDataRoundState) Reset()                    { *m = EventDataRoundState{} }
func (m *EventDataRoundState) String() string            { return proto.CompactTextString(m) }
func (*EventDataRoundState) ProtoMessage()               {}
func (*EventDataRoundState) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{3} }

func (m *EventDataRoundState) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *EventDataRoundState) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *EventDataRoundState) GetStep() string {
	if m != nil {
		return m.Step
	}
	return ""
}

type EventDataVote struct {
	Vote *types.Vote `protobuf:"bytes,1,opt,name=Vote" json:"Vote,omitempty"`
}

func (m *EventDataVote) Reset()                    { *m = EventDataVote{} }
func (m *EventDataVote) String() string            { return proto.CompactTextString(m) }
func (*EventDataVote) ProtoMessage()               {}
func (*EventDataVote) Descriptor() ([]byte, []int) { return fileDescriptorEvents, []int{4} }

func (m *EventDataVote) GetVote() *types.Vote {
	if m != nil {
		return m.Vote
	}
	return nil
}

func init() {
	proto.RegisterType((*EventDataNewBlock)(nil), "events.EventDataNewBlock")
	proto.RegisterType((*EventDataNewBlockHeader)(nil), "events.EventDataNewBlockHeader")
	proto.RegisterType((*EventDataTx)(nil), "events.EventDataTx")
	proto.RegisterType((*EventDataRoundState)(nil), "events.EventDataRoundState")
	proto.RegisterType((*EventDataVote)(nil), "events.EventDataVote")
	proto.RegisterEnum("events.EventType", EventType_name, EventType_value)
}
func (m *EventDataNewBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDataNewBlock) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Block != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Block.Size()))
		n1, err := m.Block.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *EventDataNewBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDataNewBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Header.Size()))
		n2, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *EventDataTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDataTx) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Tx) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Tx)))
		i += copy(dAtA[i:], m.Tx)
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if len(m.Log) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Log)))
		i += copy(dAtA[i:], m.Log)
	}
	if m.Code != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Code))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *EventDataRoundState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDataRoundState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Height))
	}
	if m.Round != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Round))
	}
	if len(m.Step) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Step)))
		i += copy(dAtA[i:], m.Step)
	}
	return i, nil
}

func (m *EventDataVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventDataVote) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Vote != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEvents(dAtA, i, uint64(m.Vote.Size()))
		n3, err := m.Vote.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeFixed64Events(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Events(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EventDataNewBlock) Size() (n int) {
	var l int
	_ = l
	if m.Block != nil {
		l = m.Block.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventDataNewBlockHeader) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventDataTx) Size() (n int) {
	var l int
	_ = l
	l = len(m.Tx)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Log)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovEvents(uint64(m.Code))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventDataRoundState) Size() (n int) {
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovEvents(uint64(m.Height))
	}
	if m.Round != 0 {
		n += 1 + sovEvents(uint64(m.Round))
	}
	l = len(m.Step)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventDataVote) Size() (n int) {
	var l int
	_ = l
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventDataNewBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDataNewBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDataNewBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Block == nil {
				m.Block = &types.Block{}
			}
			if err := m.Block.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDataNewBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDataNewBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDataNewBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &types.Header{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDataTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDataTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDataTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = append(m.Tx[:0], dAtA[iNdEx:postIndex]...)
			if m.Tx == nil {
				m.Tx = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Log", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Log = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= (types.CodeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDataRoundState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDataRoundState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDataRoundState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Step = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventDataVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventDataVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventDataVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &types.Vote{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEvents
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEvents(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEvents = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("events.proto", fileDescriptorEvents) }

var fileDescriptorEvents = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x18, 0xac, 0x13, 0x27, 0x25, 0x5f, 0x92, 0x76, 0xfb, 0xb5, 0xa4, 0x56, 0x0f, 0x21, 0x32, 0x42,
	0x8a, 0x38, 0x24, 0xa8, 0x1c, 0xb8, 0x70, 0x40, 0x0d, 0x91, 0x7a, 0x40, 0x15, 0xda, 0x58, 0x70,
	0x76, 0x9d, 0x4f, 0x8e, 0xd5, 0x64, 0xd7, 0xb2, 0x37, 0xc4, 0xe5, 0xc0, 0x73, 0xf0, 0x48, 0x1c,
	0x79, 0x04, 0x14, 0x5e, 0x81, 0x07, 0x40, 0xfb, 0x83, 0xa1, 0xe2, 0x62, 0x7f, 0x33, 0xe3, 0x99,
	0x1d, 0x7f, 0x5a, 0xe8, 0xd1, 0x27, 0x12, 0xaa, 0x9c, 0xe4, 0x85, 0x54, 0x12, 0xdb, 0x16, 0x5d,
	0xbc, 0x4e, 0x33, 0xb5, 0x8e, 0x6f, 0x27, 0x9f, 0x57, 0x52, 0xa4, 0xb1, 0x90, 0x62, 0x9d, 0x09,
	0x9a, 0x24, 0x72, 0x33, 0x8d, 0x85, 0x98, 0xc6, 0x22, 0xcd, 0x04, 0x4d, 0x8d, 0xa5, 0x9c, 0xaa,
	0xfb, 0x9c, 0xdc, 0xd3, 0xa6, 0x84, 0xaf, 0xe0, 0x64, 0xae, 0x73, 0xde, 0xc6, 0x2a, 0xbe, 0xa1,
	0xdd, 0xd5, 0x5a, 0x26, 0x77, 0x18, 0x42, 0xcb, 0x0c, 0x81, 0x37, 0xf2, 0xc6, 0xdd, 0xcb, 0xde,
	0xc4, 0x3a, 0x0c, 0xc7, 0xad, 0x14, 0xbe, 0x81, 0xf3, 0xff, 0x8c, 0xd7, 0x14, 0x2f, 0xa9, 0xc0,
	0x67, 0xd0, 0xb6, 0x93, 0xf3, 0xf7, 0x9d, 0xdf, 0x92, 0xdc, 0x89, 0xe1, 0x17, 0xe8, 0xd6, 0x09,
	0x51, 0x85, 0x47, 0xd0, 0x88, 0x2a, 0xe3, 0xe8, 0xf1, 0x46, 0x54, 0x21, 0x82, 0xaf, 0x95, 0xa0,
	0x61, 0x18, 0x33, 0x23, 0x83, 0xe6, 0x3b, 0x99, 0x06, 0xcd, 0x91, 0x37, 0xee, 0x70, 0x3d, 0xe2,
	0x53, 0xf0, 0x67, 0x72, 0x49, 0x81, 0x3f, 0xf2, 0xc6, 0x47, 0x97, 0xc7, 0xee, 0x24, 0x4d, 0x45,
	0xf7, 0x39, 0x71, 0x23, 0xe2, 0x19, 0xb4, 0xe6, 0x45, 0x21, 0x8b, 0xa0, 0x65, 0x8c, 0x16, 0x84,
	0x1f, 0xe1, 0xb4, 0x3e, 0x9f, 0xcb, 0xad, 0x58, 0x2e, 0x54, 0xac, 0x08, 0x07, 0xba, 0x7d, 0x96,
	0xae, 0x94, 0xe9, 0xd2, 0xe4, 0x0e, 0xe9, 0x10, 0xf3, 0x95, 0x29, 0xd4, 0xe4, 0x16, 0xe8, 0x96,
	0x0b, 0x45, 0xb9, 0xab, 0x64, 0xe6, 0xf0, 0x05, 0xf4, 0xeb, 0xe0, 0x0f, 0x52, 0x11, 0x3e, 0x01,
	0x5f, 0xbf, 0xdd, 0x3a, 0xba, 0xae, 0xa4, 0xa6, 0xb8, 0x11, 0x9e, 0xff, 0xf2, 0xa0, 0x63, 0x2c,
	0xba, 0x34, 0x9e, 0x38, 0xff, 0x9f, 0xb5, 0xb2, 0x03, 0x3c, 0x77, 0x5d, 0x1f, 0x6e, 0x9a, 0x79,
	0xd8, 0x85, 0x43, 0x6b, 0xac, 0x58, 0x03, 0x4f, 0xe1, 0xd8, 0x80, 0xbf, 0x7f, 0xc3, 0x9a, 0xd8,
	0x77, 0xd1, 0xfa, 0x20, 0xe6, 0xe3, 0x05, 0x0c, 0x0c, 0x5c, 0xec, 0x32, 0x95, 0xac, 0x22, 0x39,
	0x93, 0xa2, 0x24, 0x51, 0x6e, 0x4b, 0xd6, 0xc2, 0xc7, 0xee, 0x32, 0x5c, 0x4b, 0x79, 0x77, 0x43,
	0x3b, 0x13, 0xc3, 0xda, 0x78, 0x06, 0xac, 0xa6, 0xdf, 0x17, 0x32, 0x97, 0x25, 0xb1, 0x43, 0x1c,
	0x00, 0xfe, 0xc3, 0x52, 0x22, 0x37, 0x9b, 0x4c, 0xb1, 0x47, 0x75, 0x09, 0xcd, 0xcf, 0x2c, 0xd9,
	0x79, 0x10, 0x31, 0xaf, 0x28, 0xd9, 0x2a, 0x62, 0x70, 0xc5, 0xbe, 0xed, 0x87, 0xde, 0xf7, 0xfd,
	0xd0, 0xfb, 0xb1, 0x1f, 0x7a, 0x5f, 0x7f, 0x0e, 0x0f, 0x6e, 0xdb, 0xe6, 0x56, 0xbe, 0xfc, 0x1d,
	0x00, 0x00, 0xff, 0xff, 0x71, 0xee, 0xa2, 0x42, 0xeb, 0x02, 0x00, 0x00,
}
