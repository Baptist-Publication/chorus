// Code generated by protoc-gen-gogo.
// source: message.proto
// DO NOT EDIT!

/*
	Package consensus is a generated protocol buffer package.

	It is generated from these files:
		message.proto

	It has these top-level messages:
		NewRoundStepMessage
		ProtoBitArray
		CommitStepMessage
		ProposalMessage
		ProposalPOLMessage
		BlockPartMessage
		VoteMessage
		HasVoteMessage
		VoteSetMaj23Message
		VoteSetBitsMessage
		ConsensusMessage
*/
package consensus

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import types "github.com/Baptist-Publication/chorus/angine/protos/types"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MsgType int32

const (
	MsgType_None         MsgType = 0
	MsgType_NewRoundStep MsgType = 1
	MsgType_CommitStep   MsgType = 2
	MsgType_Proposal     MsgType = 3
	MsgType_ProposalPOL  MsgType = 4
	MsgType_BlockPart    MsgType = 5
	MsgType_Vote         MsgType = 6
	MsgType_HasVote      MsgType = 7
	MsgType_VoteSetMaj23 MsgType = 8
	MsgType_VoteSetBits  MsgType = 9
)

var MsgType_name = map[int32]string{
	0: "None",
	1: "NewRoundStep",
	2: "CommitStep",
	3: "Proposal",
	4: "ProposalPOL",
	5: "BlockPart",
	6: "Vote",
	7: "HasVote",
	8: "VoteSetMaj23",
	9: "VoteSetBits",
}
var MsgType_value = map[string]int32{
	"None":         0,
	"NewRoundStep": 1,
	"CommitStep":   2,
	"Proposal":     3,
	"ProposalPOL":  4,
	"BlockPart":    5,
	"Vote":         6,
	"HasVote":      7,
	"VoteSetMaj23": 8,
	"VoteSetBits":  9,
}

func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}
func (MsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

type RoundStepType int32

const (
	RoundStepType_EnumBegin     RoundStepType = 0
	RoundStepType_NewHeight     RoundStepType = 1
	RoundStepType_NewRound      RoundStepType = 2
	RoundStepType_Propose       RoundStepType = 3
	RoundStepType_Prevote       RoundStepType = 4
	RoundStepType_PrevoteWait   RoundStepType = 5
	RoundStepType_Precommit     RoundStepType = 6
	RoundStepType_PrecommitWait RoundStepType = 7
	RoundStepType_Commit        RoundStepType = 8
)

var RoundStepType_name = map[int32]string{
	0: "EnumBegin",
	1: "NewHeight",
	2: "NewRound",
	3: "Propose",
	4: "Prevote",
	5: "PrevoteWait",
	6: "Precommit",
	7: "PrecommitWait",
	8: "Commit",
}
var RoundStepType_value = map[string]int32{
	"EnumBegin":     0,
	"NewHeight":     1,
	"NewRound":      2,
	"Propose":       3,
	"Prevote":       4,
	"PrevoteWait":   5,
	"Precommit":     6,
	"PrecommitWait": 7,
	"Commit":        8,
}

func (x RoundStepType) String() string {
	return proto.EnumName(RoundStepType_name, int32(x))
}
func (RoundStepType) EnumDescriptor() ([]byte, []int) { return fileDescriptorMessage, []int{1} }

type NewRoundStepMessage struct {
	Height                int64         `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Round                 int64         `protobuf:"varint,2,opt,name=Round,proto3" json:"Round,omitempty"`
	Step                  RoundStepType `protobuf:"varint,3,opt,name=Step,proto3,enum=consensus.RoundStepType" json:"Step,omitempty"`
	SecondsSinceStartTime int64         `protobuf:"varint,4,opt,name=SecondsSinceStartTime,proto3" json:"SecondsSinceStartTime,omitempty"`
	LastCommitRound       int64         `protobuf:"varint,5,opt,name=LastCommitRound,proto3" json:"LastCommitRound,omitempty"`
}

func (m *NewRoundStepMessage) Reset()                    { *m = NewRoundStepMessage{} }
func (m *NewRoundStepMessage) String() string            { return proto.CompactTextString(m) }
func (*NewRoundStepMessage) ProtoMessage()               {}
func (*NewRoundStepMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{0} }

func (m *NewRoundStepMessage) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *NewRoundStepMessage) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *NewRoundStepMessage) GetStep() RoundStepType {
	if m != nil {
		return m.Step
	}
	return RoundStepType_EnumBegin
}

func (m *NewRoundStepMessage) GetSecondsSinceStartTime() int64 {
	if m != nil {
		return m.SecondsSinceStartTime
	}
	return 0
}

func (m *NewRoundStepMessage) GetLastCommitRound() int64 {
	if m != nil {
		return m.LastCommitRound
	}
	return 0
}

type ProtoBitArray struct {
	Bits  int64    `protobuf:"varint,3,opt,name=Bits,proto3" json:"Bits,omitempty"`
	Elems []uint64 `protobuf:"varint,4,rep,packed,name=Elems" json:"Elems,omitempty"`
}

func (m *ProtoBitArray) Reset()                    { *m = ProtoBitArray{} }
func (m *ProtoBitArray) String() string            { return proto.CompactTextString(m) }
func (*ProtoBitArray) ProtoMessage()               {}
func (*ProtoBitArray) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{1} }

func (m *ProtoBitArray) GetBits() int64 {
	if m != nil {
		return m.Bits
	}
	return 0
}

func (m *ProtoBitArray) GetElems() []uint64 {
	if m != nil {
		return m.Elems
	}
	return nil
}

type CommitStepMessage struct {
	Height           int64                `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	BlockPartsHeader *types.PartSetHeader `protobuf:"bytes,2,opt,name=BlockPartsHeader" json:"BlockPartsHeader,omitempty"`
	BlockParts       *ProtoBitArray       `protobuf:"bytes,3,opt,name=BlockParts" json:"BlockParts,omitempty"`
}

func (m *CommitStepMessage) Reset()                    { *m = CommitStepMessage{} }
func (m *CommitStepMessage) String() string            { return proto.CompactTextString(m) }
func (*CommitStepMessage) ProtoMessage()               {}
func (*CommitStepMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{2} }

func (m *CommitStepMessage) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *CommitStepMessage) GetBlockPartsHeader() *types.PartSetHeader {
	if m != nil {
		return m.BlockPartsHeader
	}
	return nil
}

func (m *CommitStepMessage) GetBlockParts() *ProtoBitArray {
	if m != nil {
		return m.BlockParts
	}
	return nil
}

type ProposalMessage struct {
	Proposal *types.Proposal `protobuf:"bytes,1,opt,name=Proposal" json:"Proposal,omitempty"`
}

func (m *ProposalMessage) Reset()                    { *m = ProposalMessage{} }
func (m *ProposalMessage) String() string            { return proto.CompactTextString(m) }
func (*ProposalMessage) ProtoMessage()               {}
func (*ProposalMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{3} }

func (m *ProposalMessage) GetProposal() *types.Proposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

type ProposalPOLMessage struct {
	Height           int64          `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	ProposalPOLRound int64          `protobuf:"varint,2,opt,name=ProposalPOLRound,proto3" json:"ProposalPOLRound,omitempty"`
	ProposalPOL      *ProtoBitArray `protobuf:"bytes,3,opt,name=ProposalPOL" json:"ProposalPOL,omitempty"`
}

func (m *ProposalPOLMessage) Reset()                    { *m = ProposalPOLMessage{} }
func (m *ProposalPOLMessage) String() string            { return proto.CompactTextString(m) }
func (*ProposalPOLMessage) ProtoMessage()               {}
func (*ProposalPOLMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{4} }

func (m *ProposalPOLMessage) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ProposalPOLMessage) GetProposalPOLRound() int64 {
	if m != nil {
		return m.ProposalPOLRound
	}
	return 0
}

func (m *ProposalPOLMessage) GetProposalPOL() *ProtoBitArray {
	if m != nil {
		return m.ProposalPOL
	}
	return nil
}

type BlockPartMessage struct {
	Height int64       `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Round  int64       `protobuf:"varint,2,opt,name=Round,proto3" json:"Round,omitempty"`
	Part   *types.Part `protobuf:"bytes,3,opt,name=Part" json:"Part,omitempty"`
}

func (m *BlockPartMessage) Reset()                    { *m = BlockPartMessage{} }
func (m *BlockPartMessage) String() string            { return proto.CompactTextString(m) }
func (*BlockPartMessage) ProtoMessage()               {}
func (*BlockPartMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{5} }

func (m *BlockPartMessage) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockPartMessage) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *BlockPartMessage) GetPart() *types.Part {
	if m != nil {
		return m.Part
	}
	return nil
}

type VoteMessage struct {
	Vote *types.Vote `protobuf:"bytes,1,opt,name=Vote" json:"Vote,omitempty"`
}

func (m *VoteMessage) Reset()                    { *m = VoteMessage{} }
func (m *VoteMessage) String() string            { return proto.CompactTextString(m) }
func (*VoteMessage) ProtoMessage()               {}
func (*VoteMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{6} }

func (m *VoteMessage) GetVote() *types.Vote {
	if m != nil {
		return m.Vote
	}
	return nil
}

type HasVoteMessage struct {
	Height int64          `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Round  int64          `protobuf:"varint,2,opt,name=Round,proto3" json:"Round,omitempty"`
	Type   types.VoteType `protobuf:"varint,3,opt,name=Type,proto3,enum=types.VoteType" json:"Type,omitempty"`
	Index  int64          `protobuf:"varint,4,opt,name=Index,proto3" json:"Index,omitempty"`
}

func (m *HasVoteMessage) Reset()                    { *m = HasVoteMessage{} }
func (m *HasVoteMessage) String() string            { return proto.CompactTextString(m) }
func (*HasVoteMessage) ProtoMessage()               {}
func (*HasVoteMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{7} }

func (m *HasVoteMessage) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *HasVoteMessage) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *HasVoteMessage) GetType() types.VoteType {
	if m != nil {
		return m.Type
	}
	return types.VoteType_None
}

func (m *HasVoteMessage) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type VoteSetMaj23Message struct {
	Height  int64          `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Round   int64          `protobuf:"varint,2,opt,name=Round,proto3" json:"Round,omitempty"`
	Type    types.VoteType `protobuf:"varint,3,opt,name=Type,proto3,enum=types.VoteType" json:"Type,omitempty"`
	BlockID *types.BlockID `protobuf:"bytes,4,opt,name=BlockID" json:"BlockID,omitempty"`
}

func (m *VoteSetMaj23Message) Reset()                    { *m = VoteSetMaj23Message{} }
func (m *VoteSetMaj23Message) String() string            { return proto.CompactTextString(m) }
func (*VoteSetMaj23Message) ProtoMessage()               {}
func (*VoteSetMaj23Message) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{8} }

func (m *VoteSetMaj23Message) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *VoteSetMaj23Message) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *VoteSetMaj23Message) GetType() types.VoteType {
	if m != nil {
		return m.Type
	}
	return types.VoteType_None
}

func (m *VoteSetMaj23Message) GetBlockID() *types.BlockID {
	if m != nil {
		return m.BlockID
	}
	return nil
}

type VoteSetBitsMessage struct {
	Height  int64          `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Round   int64          `protobuf:"varint,2,opt,name=Round,proto3" json:"Round,omitempty"`
	Type    types.VoteType `protobuf:"varint,3,opt,name=Type,proto3,enum=types.VoteType" json:"Type,omitempty"`
	BlockID *types.BlockID `protobuf:"bytes,4,opt,name=BlockID" json:"BlockID,omitempty"`
	Votes   *ProtoBitArray `protobuf:"bytes,5,opt,name=Votes" json:"Votes,omitempty"`
}

func (m *VoteSetBitsMessage) Reset()                    { *m = VoteSetBitsMessage{} }
func (m *VoteSetBitsMessage) String() string            { return proto.CompactTextString(m) }
func (*VoteSetBitsMessage) ProtoMessage()               {}
func (*VoteSetBitsMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{9} }

func (m *VoteSetBitsMessage) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *VoteSetBitsMessage) GetRound() int64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *VoteSetBitsMessage) GetType() types.VoteType {
	if m != nil {
		return m.Type
	}
	return types.VoteType_None
}

func (m *VoteSetBitsMessage) GetBlockID() *types.BlockID {
	if m != nil {
		return m.BlockID
	}
	return nil
}

func (m *VoteSetBitsMessage) GetVotes() *ProtoBitArray {
	if m != nil {
		return m.Votes
	}
	return nil
}

type ConsensusMessage struct {
	Type MsgType `protobuf:"varint,1,opt,name=Type,proto3,enum=consensus.MsgType" json:"Type,omitempty"`
	Data []byte  `protobuf:"bytes,2,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *ConsensusMessage) Reset()                    { *m = ConsensusMessage{} }
func (m *ConsensusMessage) String() string            { return proto.CompactTextString(m) }
func (*ConsensusMessage) ProtoMessage()               {}
func (*ConsensusMessage) Descriptor() ([]byte, []int) { return fileDescriptorMessage, []int{10} }

func (m *ConsensusMessage) GetType() MsgType {
	if m != nil {
		return m.Type
	}
	return MsgType_None
}

func (m *ConsensusMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*NewRoundStepMessage)(nil), "consensus.NewRoundStepMessage")
	proto.RegisterType((*ProtoBitArray)(nil), "consensus.ProtoBitArray")
	proto.RegisterType((*CommitStepMessage)(nil), "consensus.CommitStepMessage")
	proto.RegisterType((*ProposalMessage)(nil), "consensus.ProposalMessage")
	proto.RegisterType((*ProposalPOLMessage)(nil), "consensus.ProposalPOLMessage")
	proto.RegisterType((*BlockPartMessage)(nil), "consensus.BlockPartMessage")
	proto.RegisterType((*VoteMessage)(nil), "consensus.VoteMessage")
	proto.RegisterType((*HasVoteMessage)(nil), "consensus.HasVoteMessage")
	proto.RegisterType((*VoteSetMaj23Message)(nil), "consensus.VoteSetMaj23Message")
	proto.RegisterType((*VoteSetBitsMessage)(nil), "consensus.VoteSetBitsMessage")
	proto.RegisterType((*ConsensusMessage)(nil), "consensus.ConsensusMessage")
	proto.RegisterEnum("consensus.MsgType", MsgType_name, MsgType_value)
	proto.RegisterEnum("consensus.RoundStepType", RoundStepType_name, RoundStepType_value)
}
func (m *NewRoundStepMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewRoundStepMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Height))
	}
	if m.Round != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Round))
	}
	if m.Step != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Step))
	}
	if m.SecondsSinceStartTime != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.SecondsSinceStartTime))
	}
	if m.LastCommitRound != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.LastCommitRound))
	}
	return i, nil
}

func (m *ProtoBitArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoBitArray) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Bits != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Bits))
	}
	if len(m.Elems) > 0 {
		dAtA2 := make([]byte, len(m.Elems)*10)
		var j1 int
		for _, num := range m.Elems {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessage(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	return i, nil
}

func (m *CommitStepMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitStepMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Height))
	}
	if m.BlockPartsHeader != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.BlockPartsHeader.Size()))
		n3, err := m.BlockPartsHeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.BlockParts != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.BlockParts.Size()))
		n4, err := m.BlockParts.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *ProposalMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Proposal != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Proposal.Size()))
		n5, err := m.Proposal.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func (m *ProposalPOLMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalPOLMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Height))
	}
	if m.ProposalPOLRound != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.ProposalPOLRound))
	}
	if m.ProposalPOL != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.ProposalPOL.Size()))
		n6, err := m.ProposalPOL.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	return i, nil
}

func (m *BlockPartMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockPartMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Height))
	}
	if m.Round != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Round))
	}
	if m.Part != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Part.Size()))
		n7, err := m.Part.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	return i, nil
}

func (m *VoteMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Vote != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Vote.Size()))
		n8, err := m.Vote.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *HasVoteMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HasVoteMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Height))
	}
	if m.Round != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Round))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Type))
	}
	if m.Index != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Index))
	}
	return i, nil
}

func (m *VoteSetMaj23Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteSetMaj23Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Height))
	}
	if m.Round != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Round))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Type))
	}
	if m.BlockID != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.BlockID.Size()))
		n9, err := m.BlockID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	return i, nil
}

func (m *VoteSetBitsMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteSetBitsMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Height))
	}
	if m.Round != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Round))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Type))
	}
	if m.BlockID != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.BlockID.Size()))
		n10, err := m.BlockID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.Votes != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Votes.Size()))
		n11, err := m.Votes.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *ConsensusMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintMessage(dAtA, i, uint64(m.Type))
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func encodeFixed64Message(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Message(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NewRoundStepMessage) Size() (n int) {
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMessage(uint64(m.Height))
	}
	if m.Round != 0 {
		n += 1 + sovMessage(uint64(m.Round))
	}
	if m.Step != 0 {
		n += 1 + sovMessage(uint64(m.Step))
	}
	if m.SecondsSinceStartTime != 0 {
		n += 1 + sovMessage(uint64(m.SecondsSinceStartTime))
	}
	if m.LastCommitRound != 0 {
		n += 1 + sovMessage(uint64(m.LastCommitRound))
	}
	return n
}

func (m *ProtoBitArray) Size() (n int) {
	var l int
	_ = l
	if m.Bits != 0 {
		n += 1 + sovMessage(uint64(m.Bits))
	}
	if len(m.Elems) > 0 {
		l = 0
		for _, e := range m.Elems {
			l += sovMessage(uint64(e))
		}
		n += 1 + sovMessage(uint64(l)) + l
	}
	return n
}

func (m *CommitStepMessage) Size() (n int) {
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMessage(uint64(m.Height))
	}
	if m.BlockPartsHeader != nil {
		l = m.BlockPartsHeader.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.BlockParts != nil {
		l = m.BlockParts.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ProposalMessage) Size() (n int) {
	var l int
	_ = l
	if m.Proposal != nil {
		l = m.Proposal.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ProposalPOLMessage) Size() (n int) {
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMessage(uint64(m.Height))
	}
	if m.ProposalPOLRound != 0 {
		n += 1 + sovMessage(uint64(m.ProposalPOLRound))
	}
	if m.ProposalPOL != nil {
		l = m.ProposalPOL.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *BlockPartMessage) Size() (n int) {
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMessage(uint64(m.Height))
	}
	if m.Round != 0 {
		n += 1 + sovMessage(uint64(m.Round))
	}
	if m.Part != nil {
		l = m.Part.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *VoteMessage) Size() (n int) {
	var l int
	_ = l
	if m.Vote != nil {
		l = m.Vote.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *HasVoteMessage) Size() (n int) {
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMessage(uint64(m.Height))
	}
	if m.Round != 0 {
		n += 1 + sovMessage(uint64(m.Round))
	}
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	if m.Index != 0 {
		n += 1 + sovMessage(uint64(m.Index))
	}
	return n
}

func (m *VoteSetMaj23Message) Size() (n int) {
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMessage(uint64(m.Height))
	}
	if m.Round != 0 {
		n += 1 + sovMessage(uint64(m.Round))
	}
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	if m.BlockID != nil {
		l = m.BlockID.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *VoteSetBitsMessage) Size() (n int) {
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovMessage(uint64(m.Height))
	}
	if m.Round != 0 {
		n += 1 + sovMessage(uint64(m.Round))
	}
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	if m.BlockID != nil {
		l = m.BlockID.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Votes != nil {
		l = m.Votes.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func (m *ConsensusMessage) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMessage(uint64(m.Type))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	return n
}

func sovMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NewRoundStepMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewRoundStepMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewRoundStepMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= (RoundStepType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondsSinceStartTime", wireType)
			}
			m.SecondsSinceStartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondsSinceStartTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCommitRound", wireType)
			}
			m.LastCommitRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCommitRound |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoBitArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoBitArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoBitArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bits", wireType)
			}
			m.Bits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bits |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Elems = append(m.Elems, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMessage
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Elems = append(m.Elems, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Elems", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitStepMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitStepMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitStepMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockPartsHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockPartsHeader == nil {
				m.BlockPartsHeader = &types.PartSetHeader{}
			}
			if err := m.BlockPartsHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockParts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockParts == nil {
				m.BlockParts = &ProtoBitArray{}
			}
			if err := m.BlockParts.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proposal == nil {
				m.Proposal = &types.Proposal{}
			}
			if err := m.Proposal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalPOLMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalPOLMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalPOLMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalPOLRound", wireType)
			}
			m.ProposalPOLRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalPOLRound |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalPOL", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProposalPOL == nil {
				m.ProposalPOL = &ProtoBitArray{}
			}
			if err := m.ProposalPOL.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockPartMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockPartMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockPartMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Part", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Part == nil {
				m.Part = &types.Part{}
			}
			if err := m.Part.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vote", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vote == nil {
				m.Vote = &types.Vote{}
			}
			if err := m.Vote.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HasVoteMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HasVoteMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HasVoteMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (types.VoteType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteSetMaj23Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteSetMaj23Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteSetMaj23Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (types.VoteType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockID == nil {
				m.BlockID = &types.BlockID{}
			}
			if err := m.BlockID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoteSetBitsMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteSetBitsMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteSetBitsMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (types.VoteType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockID == nil {
				m.BlockID = &types.BlockID{}
			}
			if err := m.BlockID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Votes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Votes == nil {
				m.Votes = &ProtoBitArray{}
			}
			if err := m.Votes.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (MsgType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("message.proto", fileDescriptorMessage) }

var fileDescriptorMessage = []byte{
	// 719 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0x5f, 0x6b, 0x13, 0x41,
	0x10, 0xef, 0x36, 0x97, 0x7f, 0x73, 0x4d, 0xb2, 0xdd, 0x56, 0x09, 0x3e, 0xa4, 0xe5, 0x04, 0x09,
	0x55, 0x2e, 0x90, 0xfa, 0xa0, 0x22, 0xa2, 0x69, 0x0b, 0x2d, 0xb4, 0x31, 0x5c, 0x8a, 0x3e, 0x6f,
	0x93, 0x25, 0x3d, 0xcd, 0xed, 0x85, 0xdb, 0xad, 0x35, 0x7e, 0x0c, 0xe9, 0x83, 0x2f, 0x3e, 0xfb,
	0x39, 0x7c, 0xf3, 0x51, 0xbf, 0x81, 0xd4, 0x2f, 0x22, 0xbb, 0x7b, 0x97, 0x6e, 0xac, 0x58, 0x15,
	0x04, 0x5f, 0xc2, 0xcd, 0xcc, 0x6f, 0x66, 0x7e, 0x33, 0x3b, 0x33, 0x81, 0x4a, 0xc4, 0x84, 0xa0,
	0x23, 0xe6, 0x4f, 0x92, 0x58, 0xc6, 0xa4, 0x3c, 0x88, 0xb9, 0x60, 0x5c, 0x9c, 0x88, 0x1b, 0x0f,
	0x47, 0xa1, 0x1c, 0xd3, 0x23, 0xff, 0xcd, 0x71, 0xcc, 0x47, 0x94, 0xc7, 0x7c, 0x1c, 0x72, 0xe6,
	0x0f, 0xe2, 0xa8, 0x45, 0x39, 0x6f, 0x51, 0x3e, 0x0a, 0x39, 0x6b, 0x69, 0x2f, 0xd1, 0x92, 0xd3,
	0x09, 0x4b, 0x7f, 0x4d, 0x20, 0xef, 0x0b, 0x82, 0x95, 0x2e, 0x3b, 0x0d, 0xe2, 0x13, 0x3e, 0xec,
	0x4b, 0x36, 0x39, 0x30, 0x69, 0xc8, 0x75, 0x28, 0xec, 0xb2, 0x70, 0x74, 0x2c, 0xeb, 0x68, 0x1d,
	0x35, 0x73, 0x41, 0x2a, 0x91, 0x55, 0xc8, 0x6b, 0x6c, 0x7d, 0x51, 0xab, 0x8d, 0x40, 0xee, 0x80,
	0xa3, 0x9c, 0xeb, 0xb9, 0x75, 0xd4, 0xac, 0xb6, 0xeb, 0xfe, 0x8c, 0x9d, 0x3f, 0x0b, 0x7c, 0x38,
	0x9d, 0xb0, 0x40, 0xa3, 0xc8, 0x5d, 0xb8, 0xd6, 0x67, 0x83, 0x98, 0x0f, 0x45, 0x3f, 0xe4, 0x03,
	0xd6, 0x97, 0x34, 0x91, 0x87, 0x61, 0xc4, 0xea, 0x8e, 0x8e, 0xf9, 0x73, 0x23, 0x69, 0x42, 0x6d,
	0x9f, 0x0a, 0xb9, 0x15, 0x47, 0x51, 0x28, 0x0d, 0x87, 0xbc, 0xc6, 0xff, 0xa8, 0xf6, 0xee, 0x43,
	0xa5, 0xa7, 0x8a, 0xeb, 0x84, 0xf2, 0x49, 0x92, 0xd0, 0x29, 0x21, 0xe0, 0x74, 0x42, 0x29, 0x34,
	0xbd, 0x5c, 0xa0, 0xbf, 0x55, 0x21, 0x3b, 0x63, 0x16, 0x89, 0xba, 0xb3, 0x9e, 0x6b, 0x3a, 0x81,
	0x11, 0xbc, 0x0f, 0x08, 0x96, 0x4d, 0xa8, 0xdf, 0x69, 0xc6, 0x63, 0xc0, 0x9d, 0x71, 0x3c, 0x78,
	0xd9, 0xa3, 0x89, 0x14, 0xbb, 0x8c, 0x0e, 0x59, 0xa2, 0xfb, 0xe2, 0xb6, 0x57, 0x7d, 0xd3, 0x64,
	0x65, 0xe9, 0x33, 0x69, 0x6c, 0xc1, 0x25, 0x34, 0xb9, 0x07, 0x70, 0xa1, 0xd3, 0xfc, 0xdc, 0xb9,
	0xf6, 0xcd, 0xd5, 0x11, 0x58, 0x58, 0xef, 0x11, 0xd4, 0x7a, 0x49, 0x3c, 0x89, 0x05, 0x1d, 0x67,
	0x34, 0x6f, 0x43, 0x29, 0x53, 0x69, 0xa2, 0x6e, 0xbb, 0x96, 0xd1, 0x48, 0xd5, 0xc1, 0x0c, 0xe0,
	0x9d, 0x21, 0x20, 0x99, 0xd0, 0x7b, 0xba, 0x7f, 0x55, 0xa9, 0x1b, 0x80, 0x2d, 0xb4, 0x3d, 0x02,
	0x97, 0xf4, 0xe4, 0x01, 0xb8, 0x96, 0xee, 0xca, 0xaa, 0x6c, 0xb0, 0x47, 0xad, 0x96, 0xfe, 0xdd,
	0x2c, 0xae, 0x81, 0xa3, 0x9c, 0xd3, 0xb4, 0xae, 0xf5, 0x10, 0x81, 0x36, 0x78, 0x3e, 0xb8, 0xcf,
	0x62, 0xc9, 0xb2, 0xe8, 0x6b, 0xe0, 0x28, 0x31, 0xed, 0x58, 0x86, 0x57, 0xaa, 0x40, 0x1b, 0xbc,
	0x29, 0x54, 0x77, 0xa9, 0xb0, 0x5d, 0xfe, 0x8c, 0xd0, 0x4d, 0x70, 0xd4, 0xf0, 0xa7, 0xcb, 0x51,
	0xb3, 0x12, 0x98, 0x9d, 0x50, 0xbf, 0xca, 0x75, 0x8f, 0x0f, 0xd9, 0xeb, 0x74, 0x07, 0x8c, 0xe0,
	0xbd, 0x45, 0xb0, 0xa2, 0x80, 0x7d, 0x26, 0x0f, 0xe8, 0x8b, 0xf6, 0xe6, 0x3f, 0x24, 0xd0, 0x84,
	0xa2, 0x6e, 0xfc, 0xde, 0xb6, 0xa6, 0xe0, 0xb6, 0xab, 0x29, 0x2e, 0xd5, 0x06, 0x99, 0xd9, 0xfb,
	0x88, 0x80, 0xa4, 0xa4, 0xd4, 0x26, 0xfd, 0x0f, 0x9c, 0x88, 0x0f, 0x79, 0xe5, 0x2b, 0xf4, 0x49,
	0xf8, 0xd5, 0xb0, 0x19, 0x98, 0xd7, 0x05, 0xbc, 0x95, 0x21, 0xb2, 0x02, 0x6e, 0xa5, 0x94, 0x90,
	0xa6, 0x44, 0xac, 0x10, 0x07, 0x62, 0x64, 0xb1, 0x22, 0xe0, 0x6c, 0x53, 0x49, 0x75, 0x3d, 0x4b,
	0x81, 0xfe, 0xde, 0x78, 0x8f, 0xa0, 0x98, 0xa2, 0x48, 0x09, 0x9c, 0x6e, 0xcc, 0x19, 0x5e, 0x20,
	0x18, 0x96, 0xec, 0xdb, 0x8a, 0x11, 0xa9, 0x02, 0x5c, 0x9c, 0x17, 0xbc, 0x48, 0x96, 0x2e, 0x56,
	0x16, 0xe7, 0x48, 0x6d, 0x6e, 0x71, 0xb0, 0x43, 0x2a, 0x50, 0x9e, 0x6d, 0x03, 0xce, 0xab, 0xc8,
	0x8a, 0x3e, 0x2e, 0x10, 0x17, 0x8a, 0xe9, 0x4c, 0xe2, 0xa2, 0x4a, 0x63, 0x0f, 0x09, 0x2e, 0xa9,
	0x40, 0xd6, 0x0b, 0xe1, 0xf2, 0xc6, 0x19, 0x82, 0xca, 0xdc, 0x29, 0x56, 0xa1, 0x77, 0xf8, 0x49,
	0xd4, 0x61, 0xa3, 0x90, 0xe3, 0x05, 0x25, 0x76, 0xd9, 0xa9, 0x79, 0x32, 0x8c, 0x14, 0xaf, 0x8c,
	0x39, 0x5e, 0x54, 0xd9, 0x0c, 0x2f, 0x86, 0x73, 0x46, 0x60, 0xaf, 0x54, 0x6a, 0xc7, 0x30, 0xd6,
	0xc2, 0x73, 0x1a, 0x2a, 0x8a, 0x15, 0x28, 0xf7, 0x12, 0x36, 0xd0, 0x35, 0xe2, 0x02, 0x59, 0x56,
	0xa7, 0x38, 0x15, 0x35, 0xa2, 0x48, 0x00, 0x0a, 0xa6, 0x05, 0xb8, 0xd4, 0xc1, 0x9f, 0xce, 0x1b,
	0xe8, 0xf3, 0x79, 0x03, 0x7d, 0x3d, 0x6f, 0xa0, 0x77, 0xdf, 0x1a, 0x0b, 0x47, 0x05, 0xfd, 0xb7,
	0xb4, 0xf9, 0x3d, 0x00, 0x00, 0xff, 0xff, 0xa0, 0x0b, 0x7d, 0x51, 0xf0, 0x06, 0x00, 0x00,
}
